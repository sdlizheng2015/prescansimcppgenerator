// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bridge_msgs/chassis_msgs/chassis.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bridge_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bridge_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bridge_msgs/basic_msgs/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bridge_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bridge_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bridge_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto;
namespace prescan {
namespace chassis {
class Chassis;
struct ChassisDefaultTypeInternal;
extern ChassisDefaultTypeInternal _Chassis_default_instance_;
}  // namespace chassis
}  // namespace prescan
PROTOBUF_NAMESPACE_OPEN
template<> ::prescan::chassis::Chassis* Arena::CreateMaybeMessage<::prescan::chassis::Chassis>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace prescan {
namespace chassis {

enum Chassis_GearPosition : int {
  Chassis_GearPosition_GEAR_NEUTRAL = 0,
  Chassis_GearPosition_GEAR_DRIVE = 1,
  Chassis_GearPosition_GEAR_REVERSE = 2,
  Chassis_GearPosition_GEAR_PARKING = 3,
  Chassis_GearPosition_GEAR_LOW = 4,
  Chassis_GearPosition_GEAR_INVALID = 5,
  Chassis_GearPosition_GEAR_NONE = 6
};
bool Chassis_GearPosition_IsValid(int value);
constexpr Chassis_GearPosition Chassis_GearPosition_GearPosition_MIN = Chassis_GearPosition_GEAR_NEUTRAL;
constexpr Chassis_GearPosition Chassis_GearPosition_GearPosition_MAX = Chassis_GearPosition_GEAR_NONE;
constexpr int Chassis_GearPosition_GearPosition_ARRAYSIZE = Chassis_GearPosition_GearPosition_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_GearPosition_descriptor();
template<typename T>
inline const std::string& Chassis_GearPosition_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Chassis_GearPosition>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Chassis_GearPosition_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Chassis_GearPosition_descriptor(), enum_t_value);
}
inline bool Chassis_GearPosition_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Chassis_GearPosition* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Chassis_GearPosition>(
    Chassis_GearPosition_descriptor(), name, value);
}
// ===================================================================

class Chassis final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prescan.chassis.Chassis) */ {
 public:
  inline Chassis() : Chassis(nullptr) {}
  ~Chassis() override;
  explicit constexpr Chassis(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chassis(const Chassis& from);
  Chassis(Chassis&& from) noexcept
    : Chassis() {
    *this = ::std::move(from);
  }

  inline Chassis& operator=(const Chassis& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chassis& operator=(Chassis&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chassis& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chassis* internal_default_instance() {
    return reinterpret_cast<const Chassis*>(
               &_Chassis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Chassis& a, Chassis& b) {
    a.Swap(&b);
  }
  inline void Swap(Chassis* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chassis* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Chassis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Chassis>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Chassis& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Chassis& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chassis* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prescan.chassis.Chassis";
  }
  protected:
  explicit Chassis(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Chassis_GearPosition GearPosition;
  static constexpr GearPosition GEAR_NEUTRAL =
    Chassis_GearPosition_GEAR_NEUTRAL;
  static constexpr GearPosition GEAR_DRIVE =
    Chassis_GearPosition_GEAR_DRIVE;
  static constexpr GearPosition GEAR_REVERSE =
    Chassis_GearPosition_GEAR_REVERSE;
  static constexpr GearPosition GEAR_PARKING =
    Chassis_GearPosition_GEAR_PARKING;
  static constexpr GearPosition GEAR_LOW =
    Chassis_GearPosition_GEAR_LOW;
  static constexpr GearPosition GEAR_INVALID =
    Chassis_GearPosition_GEAR_INVALID;
  static constexpr GearPosition GEAR_NONE =
    Chassis_GearPosition_GEAR_NONE;
  static inline bool GearPosition_IsValid(int value) {
    return Chassis_GearPosition_IsValid(value);
  }
  static constexpr GearPosition GearPosition_MIN =
    Chassis_GearPosition_GearPosition_MIN;
  static constexpr GearPosition GearPosition_MAX =
    Chassis_GearPosition_GearPosition_MAX;
  static constexpr int GearPosition_ARRAYSIZE =
    Chassis_GearPosition_GearPosition_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  GearPosition_descriptor() {
    return Chassis_GearPosition_descriptor();
  }
  template<typename T>
  static inline const std::string& GearPosition_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GearPosition>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GearPosition_Name.");
    return Chassis_GearPosition_Name(enum_t_value);
  }
  static inline bool GearPosition_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      GearPosition* value) {
    return Chassis_GearPosition_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleNameFieldNumber = 33,
    kHeaderFieldNumber = 25,
    kSpeedMpsFieldNumber = 5,
    kThrottleFieldNumber = 8,
    kGearLocationFieldNumber = 23,
    kBrakeFieldNumber = 9,
    kSteeringFieldNumber = 11,
  };
  // optional string vehicle_name = 33;
  bool has_vehicle_name() const;
  private:
  bool _internal_has_vehicle_name() const;
  public:
  void clear_vehicle_name();
  const std::string& vehicle_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vehicle_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vehicle_name();
  PROTOBUF_NODISCARD std::string* release_vehicle_name();
  void set_allocated_vehicle_name(std::string* vehicle_name);
  private:
  const std::string& _internal_vehicle_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vehicle_name(const std::string& value);
  std::string* _internal_mutable_vehicle_name();
  public:

  // optional .prescan.common.Header header = 25;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::prescan::common::Header& header() const;
  PROTOBUF_NODISCARD ::prescan::common::Header* release_header();
  ::prescan::common::Header* mutable_header();
  void set_allocated_header(::prescan::common::Header* header);
  private:
  const ::prescan::common::Header& _internal_header() const;
  ::prescan::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::prescan::common::Header* header);
  ::prescan::common::Header* unsafe_arena_release_header();

  // optional float speed_mps = 5 [default = 0];
  bool has_speed_mps() const;
  private:
  bool _internal_has_speed_mps() const;
  public:
  void clear_speed_mps();
  float speed_mps() const;
  void set_speed_mps(float value);
  private:
  float _internal_speed_mps() const;
  void _internal_set_speed_mps(float value);
  public:

  // optional float throttle = 8 [default = 0];
  bool has_throttle() const;
  private:
  bool _internal_has_throttle() const;
  public:
  void clear_throttle();
  float throttle() const;
  void set_throttle(float value);
  private:
  float _internal_throttle() const;
  void _internal_set_throttle(float value);
  public:

  // optional .prescan.chassis.Chassis.GearPosition gear_location = 23;
  bool has_gear_location() const;
  private:
  bool _internal_has_gear_location() const;
  public:
  void clear_gear_location();
  ::prescan::chassis::Chassis_GearPosition gear_location() const;
  void set_gear_location(::prescan::chassis::Chassis_GearPosition value);
  private:
  ::prescan::chassis::Chassis_GearPosition _internal_gear_location() const;
  void _internal_set_gear_location(::prescan::chassis::Chassis_GearPosition value);
  public:

  // optional float brake = 9 [default = 0];
  bool has_brake() const;
  private:
  bool _internal_has_brake() const;
  public:
  void clear_brake();
  float brake() const;
  void set_brake(float value);
  private:
  float _internal_brake() const;
  void _internal_set_brake(float value);
  public:

  // optional float steering = 11 [default = 0];
  bool has_steering() const;
  private:
  bool _internal_has_steering() const;
  public:
  void clear_steering();
  float steering() const;
  void set_steering(float value);
  private:
  float _internal_steering() const;
  void _internal_set_steering(float value);
  public:

  // @@protoc_insertion_point(class_scope:prescan.chassis.Chassis)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vehicle_name_;
  ::prescan::common::Header* header_;
  float speed_mps_;
  float throttle_;
  int gear_location_;
  float brake_;
  float steering_;
  friend struct ::TableStruct_bridge_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Chassis

// optional float speed_mps = 5 [default = 0];
inline bool Chassis::_internal_has_speed_mps() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Chassis::has_speed_mps() const {
  return _internal_has_speed_mps();
}
inline void Chassis::clear_speed_mps() {
  speed_mps_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Chassis::_internal_speed_mps() const {
  return speed_mps_;
}
inline float Chassis::speed_mps() const {
  // @@protoc_insertion_point(field_get:prescan.chassis.Chassis.speed_mps)
  return _internal_speed_mps();
}
inline void Chassis::_internal_set_speed_mps(float value) {
  _has_bits_[0] |= 0x00000004u;
  speed_mps_ = value;
}
inline void Chassis::set_speed_mps(float value) {
  _internal_set_speed_mps(value);
  // @@protoc_insertion_point(field_set:prescan.chassis.Chassis.speed_mps)
}

// optional float throttle = 8 [default = 0];
inline bool Chassis::_internal_has_throttle() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Chassis::has_throttle() const {
  return _internal_has_throttle();
}
inline void Chassis::clear_throttle() {
  throttle_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Chassis::_internal_throttle() const {
  return throttle_;
}
inline float Chassis::throttle() const {
  // @@protoc_insertion_point(field_get:prescan.chassis.Chassis.throttle)
  return _internal_throttle();
}
inline void Chassis::_internal_set_throttle(float value) {
  _has_bits_[0] |= 0x00000008u;
  throttle_ = value;
}
inline void Chassis::set_throttle(float value) {
  _internal_set_throttle(value);
  // @@protoc_insertion_point(field_set:prescan.chassis.Chassis.throttle)
}

// optional float brake = 9 [default = 0];
inline bool Chassis::_internal_has_brake() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Chassis::has_brake() const {
  return _internal_has_brake();
}
inline void Chassis::clear_brake() {
  brake_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float Chassis::_internal_brake() const {
  return brake_;
}
inline float Chassis::brake() const {
  // @@protoc_insertion_point(field_get:prescan.chassis.Chassis.brake)
  return _internal_brake();
}
inline void Chassis::_internal_set_brake(float value) {
  _has_bits_[0] |= 0x00000020u;
  brake_ = value;
}
inline void Chassis::set_brake(float value) {
  _internal_set_brake(value);
  // @@protoc_insertion_point(field_set:prescan.chassis.Chassis.brake)
}

// optional float steering = 11 [default = 0];
inline bool Chassis::_internal_has_steering() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Chassis::has_steering() const {
  return _internal_has_steering();
}
inline void Chassis::clear_steering() {
  steering_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float Chassis::_internal_steering() const {
  return steering_;
}
inline float Chassis::steering() const {
  // @@protoc_insertion_point(field_get:prescan.chassis.Chassis.steering)
  return _internal_steering();
}
inline void Chassis::_internal_set_steering(float value) {
  _has_bits_[0] |= 0x00000040u;
  steering_ = value;
}
inline void Chassis::set_steering(float value) {
  _internal_set_steering(value);
  // @@protoc_insertion_point(field_set:prescan.chassis.Chassis.steering)
}

// optional .prescan.chassis.Chassis.GearPosition gear_location = 23;
inline bool Chassis::_internal_has_gear_location() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Chassis::has_gear_location() const {
  return _internal_has_gear_location();
}
inline void Chassis::clear_gear_location() {
  gear_location_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::prescan::chassis::Chassis_GearPosition Chassis::_internal_gear_location() const {
  return static_cast< ::prescan::chassis::Chassis_GearPosition >(gear_location_);
}
inline ::prescan::chassis::Chassis_GearPosition Chassis::gear_location() const {
  // @@protoc_insertion_point(field_get:prescan.chassis.Chassis.gear_location)
  return _internal_gear_location();
}
inline void Chassis::_internal_set_gear_location(::prescan::chassis::Chassis_GearPosition value) {
  assert(::prescan::chassis::Chassis_GearPosition_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  gear_location_ = value;
}
inline void Chassis::set_gear_location(::prescan::chassis::Chassis_GearPosition value) {
  _internal_set_gear_location(value);
  // @@protoc_insertion_point(field_set:prescan.chassis.Chassis.gear_location)
}

// optional .prescan.common.Header header = 25;
inline bool Chassis::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool Chassis::has_header() const {
  return _internal_has_header();
}
inline const ::prescan::common::Header& Chassis::_internal_header() const {
  const ::prescan::common::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::prescan::common::Header&>(
      ::prescan::common::_Header_default_instance_);
}
inline const ::prescan::common::Header& Chassis::header() const {
  // @@protoc_insertion_point(field_get:prescan.chassis.Chassis.header)
  return _internal_header();
}
inline void Chassis::unsafe_arena_set_allocated_header(
    ::prescan::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prescan.chassis.Chassis.header)
}
inline ::prescan::common::Header* Chassis::release_header() {
  _has_bits_[0] &= ~0x00000002u;
  ::prescan::common::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::prescan::common::Header* Chassis::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:prescan.chassis.Chassis.header)
  _has_bits_[0] &= ~0x00000002u;
  ::prescan::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::prescan::common::Header* Chassis::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000002u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::prescan::common::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::prescan::common::Header* Chassis::mutable_header() {
  ::prescan::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:prescan.chassis.Chassis.header)
  return _msg;
}
inline void Chassis::set_allocated_header(::prescan::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:prescan.chassis.Chassis.header)
}

// optional string vehicle_name = 33;
inline bool Chassis::_internal_has_vehicle_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Chassis::has_vehicle_name() const {
  return _internal_has_vehicle_name();
}
inline void Chassis::clear_vehicle_name() {
  vehicle_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Chassis::vehicle_name() const {
  // @@protoc_insertion_point(field_get:prescan.chassis.Chassis.vehicle_name)
  return _internal_vehicle_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Chassis::set_vehicle_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 vehicle_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:prescan.chassis.Chassis.vehicle_name)
}
inline std::string* Chassis::mutable_vehicle_name() {
  std::string* _s = _internal_mutable_vehicle_name();
  // @@protoc_insertion_point(field_mutable:prescan.chassis.Chassis.vehicle_name)
  return _s;
}
inline const std::string& Chassis::_internal_vehicle_name() const {
  return vehicle_name_.Get();
}
inline void Chassis::_internal_set_vehicle_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  vehicle_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Chassis::_internal_mutable_vehicle_name() {
  _has_bits_[0] |= 0x00000001u;
  return vehicle_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Chassis::release_vehicle_name() {
  // @@protoc_insertion_point(field_release:prescan.chassis.Chassis.vehicle_name)
  if (!_internal_has_vehicle_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = vehicle_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vehicle_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vehicle_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Chassis::set_allocated_vehicle_name(std::string* vehicle_name) {
  if (vehicle_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  vehicle_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vehicle_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (vehicle_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    vehicle_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:prescan.chassis.Chassis.vehicle_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace chassis
}  // namespace prescan

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::prescan::chassis::Chassis_GearPosition> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::prescan::chassis::Chassis_GearPosition>() {
  return ::prescan::chassis::Chassis_GearPosition_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bridge_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto
