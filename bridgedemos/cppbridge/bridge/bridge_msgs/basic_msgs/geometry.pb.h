// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bridge_msgs/basic_msgs/geometry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bridge_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bridge_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bridge_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bridge_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bridge_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto;
namespace prescan {
namespace common {
class BBox2D;
struct BBox2DDefaultTypeInternal;
extern BBox2DDefaultTypeInternal _BBox2D_default_instance_;
class BoundingBox3D;
struct BoundingBox3DDefaultTypeInternal;
extern BoundingBox3DDefaultTypeInternal _BoundingBox3D_default_instance_;
class Orientation;
struct OrientationDefaultTypeInternal;
extern OrientationDefaultTypeInternal _Orientation_default_instance_;
class Point2D;
struct Point2DDefaultTypeInternal;
extern Point2DDefaultTypeInternal _Point2D_default_instance_;
class Point3D;
struct Point3DDefaultTypeInternal;
extern Point3DDefaultTypeInternal _Point3D_default_instance_;
class PointLLH;
struct PointLLHDefaultTypeInternal;
extern PointLLHDefaultTypeInternal _PointLLH_default_instance_;
class Polygon;
struct PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class Quaternion;
struct QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
}  // namespace common
}  // namespace prescan
PROTOBUF_NAMESPACE_OPEN
template<> ::prescan::common::BBox2D* Arena::CreateMaybeMessage<::prescan::common::BBox2D>(Arena*);
template<> ::prescan::common::BoundingBox3D* Arena::CreateMaybeMessage<::prescan::common::BoundingBox3D>(Arena*);
template<> ::prescan::common::Orientation* Arena::CreateMaybeMessage<::prescan::common::Orientation>(Arena*);
template<> ::prescan::common::Point2D* Arena::CreateMaybeMessage<::prescan::common::Point2D>(Arena*);
template<> ::prescan::common::Point3D* Arena::CreateMaybeMessage<::prescan::common::Point3D>(Arena*);
template<> ::prescan::common::PointLLH* Arena::CreateMaybeMessage<::prescan::common::PointLLH>(Arena*);
template<> ::prescan::common::Polygon* Arena::CreateMaybeMessage<::prescan::common::Polygon>(Arena*);
template<> ::prescan::common::Quaternion* Arena::CreateMaybeMessage<::prescan::common::Quaternion>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace prescan {
namespace common {

// ===================================================================

class Point2D final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prescan.common.Point2D) */ {
 public:
  inline Point2D() : Point2D(nullptr) {}
  ~Point2D() override;
  explicit PROTOBUF_CONSTEXPR Point2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point2D(const Point2D& from);
  Point2D(Point2D&& from) noexcept
    : Point2D() {
    *this = ::std::move(from);
  }

  inline Point2D& operator=(const Point2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point2D& operator=(Point2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point2D* internal_default_instance() {
    return reinterpret_cast<const Point2D*>(
               &_Point2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point2D& a, Point2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Point2D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point2D>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point2D& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Point2D& from) {
    Point2D::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point2D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prescan.common.Point2D";
  }
  protected:
  explicit Point2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // optional double x = 1 [default = nan];
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 2 [default = nan];
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:prescan.common.Point2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double x_;
    double y_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bridge_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class Point3D final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prescan.common.Point3D) */ {
 public:
  inline Point3D() : Point3D(nullptr) {}
  ~Point3D() override;
  explicit PROTOBUF_CONSTEXPR Point3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point3D(const Point3D& from);
  Point3D(Point3D&& from) noexcept
    : Point3D() {
    *this = ::std::move(from);
  }

  inline Point3D& operator=(const Point3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point3D& operator=(Point3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point3D* internal_default_instance() {
    return reinterpret_cast<const Point3D*>(
               &_Point3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Point3D& a, Point3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Point3D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point3D>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point3D& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Point3D& from) {
    Point3D::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point3D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prescan.common.Point3D";
  }
  protected:
  explicit Point3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // optional double x = 1 [default = nan];
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 2 [default = nan];
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // optional double z = 3 [default = nan];
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:prescan.common.Point3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double x_;
    double y_;
    double z_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bridge_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class PointLLH final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prescan.common.PointLLH) */ {
 public:
  inline PointLLH() : PointLLH(nullptr) {}
  ~PointLLH() override;
  explicit PROTOBUF_CONSTEXPR PointLLH(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointLLH(const PointLLH& from);
  PointLLH(PointLLH&& from) noexcept
    : PointLLH() {
    *this = ::std::move(from);
  }

  inline PointLLH& operator=(const PointLLH& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointLLH& operator=(PointLLH&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PointLLH& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointLLH* internal_default_instance() {
    return reinterpret_cast<const PointLLH*>(
               &_PointLLH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PointLLH& a, PointLLH& b) {
    a.Swap(&b);
  }
  inline void Swap(PointLLH* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointLLH* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PointLLH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PointLLH>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PointLLH& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PointLLH& from) {
    PointLLH::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointLLH* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prescan.common.PointLLH";
  }
  protected:
  explicit PointLLH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatFieldNumber = 1,
    kLonFieldNumber = 2,
    kAltFieldNumber = 3,
  };
  // optional double lat = 1 [default = nan];
  bool has_lat() const;
  private:
  bool _internal_has_lat() const;
  public:
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // optional double lon = 2 [default = nan];
  bool has_lon() const;
  private:
  bool _internal_has_lon() const;
  public:
  void clear_lon();
  double lon() const;
  void set_lon(double value);
  private:
  double _internal_lon() const;
  void _internal_set_lon(double value);
  public:

  // optional double alt = 3 [default = nan];
  bool has_alt() const;
  private:
  bool _internal_has_alt() const;
  public:
  void clear_alt();
  double alt() const;
  void set_alt(double value);
  private:
  double _internal_alt() const;
  void _internal_set_alt(double value);
  public:

  // @@protoc_insertion_point(class_scope:prescan.common.PointLLH)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double lat_;
    double lon_;
    double alt_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bridge_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class Orientation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prescan.common.Orientation) */ {
 public:
  inline Orientation() : Orientation(nullptr) {}
  ~Orientation() override;
  explicit PROTOBUF_CONSTEXPR Orientation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Orientation(const Orientation& from);
  Orientation(Orientation&& from) noexcept
    : Orientation() {
    *this = ::std::move(from);
  }

  inline Orientation& operator=(const Orientation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Orientation& operator=(Orientation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Orientation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Orientation* internal_default_instance() {
    return reinterpret_cast<const Orientation*>(
               &_Orientation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Orientation& a, Orientation& b) {
    a.Swap(&b);
  }
  inline void Swap(Orientation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Orientation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Orientation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Orientation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Orientation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Orientation& from) {
    Orientation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Orientation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prescan.common.Orientation";
  }
  protected:
  explicit Orientation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollFieldNumber = 1,
    kPitchFieldNumber = 2,
    kYawFieldNumber = 3,
  };
  // optional double roll = 1 [default = nan];
  bool has_roll() const;
  private:
  bool _internal_has_roll() const;
  public:
  void clear_roll();
  double roll() const;
  void set_roll(double value);
  private:
  double _internal_roll() const;
  void _internal_set_roll(double value);
  public:

  // optional double pitch = 2 [default = nan];
  bool has_pitch() const;
  private:
  bool _internal_has_pitch() const;
  public:
  void clear_pitch();
  double pitch() const;
  void set_pitch(double value);
  private:
  double _internal_pitch() const;
  void _internal_set_pitch(double value);
  public:

  // optional double yaw = 3 [default = nan];
  bool has_yaw() const;
  private:
  bool _internal_has_yaw() const;
  public:
  void clear_yaw();
  double yaw() const;
  void set_yaw(double value);
  private:
  double _internal_yaw() const;
  void _internal_set_yaw(double value);
  public:

  // @@protoc_insertion_point(class_scope:prescan.common.Orientation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double roll_;
    double pitch_;
    double yaw_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bridge_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class BBox2D final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prescan.common.BBox2D) */ {
 public:
  inline BBox2D() : BBox2D(nullptr) {}
  ~BBox2D() override;
  explicit PROTOBUF_CONSTEXPR BBox2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BBox2D(const BBox2D& from);
  BBox2D(BBox2D&& from) noexcept
    : BBox2D() {
    *this = ::std::move(from);
  }

  inline BBox2D& operator=(const BBox2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline BBox2D& operator=(BBox2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BBox2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const BBox2D* internal_default_instance() {
    return reinterpret_cast<const BBox2D*>(
               &_BBox2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BBox2D& a, BBox2D& b) {
    a.Swap(&b);
  }
  inline void Swap(BBox2D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BBox2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BBox2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BBox2D>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BBox2D& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BBox2D& from) {
    BBox2D::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BBox2D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prescan.common.BBox2D";
  }
  protected:
  explicit BBox2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXminFieldNumber = 1,
    kYminFieldNumber = 2,
    kXmaxFieldNumber = 3,
    kYmaxFieldNumber = 4,
  };
  // optional double xmin = 1;
  bool has_xmin() const;
  private:
  bool _internal_has_xmin() const;
  public:
  void clear_xmin();
  double xmin() const;
  void set_xmin(double value);
  private:
  double _internal_xmin() const;
  void _internal_set_xmin(double value);
  public:

  // optional double ymin = 2;
  bool has_ymin() const;
  private:
  bool _internal_has_ymin() const;
  public:
  void clear_ymin();
  double ymin() const;
  void set_ymin(double value);
  private:
  double _internal_ymin() const;
  void _internal_set_ymin(double value);
  public:

  // optional double xmax = 3;
  bool has_xmax() const;
  private:
  bool _internal_has_xmax() const;
  public:
  void clear_xmax();
  double xmax() const;
  void set_xmax(double value);
  private:
  double _internal_xmax() const;
  void _internal_set_xmax(double value);
  public:

  // optional double ymax = 4;
  bool has_ymax() const;
  private:
  bool _internal_has_ymax() const;
  public:
  void clear_ymax();
  double ymax() const;
  void set_ymax(double value);
  private:
  double _internal_ymax() const;
  void _internal_set_ymax(double value);
  public:

  // @@protoc_insertion_point(class_scope:prescan.common.BBox2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double xmin_;
    double ymin_;
    double xmax_;
    double ymax_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bridge_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class BoundingBox3D final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prescan.common.BoundingBox3D) */ {
 public:
  inline BoundingBox3D() : BoundingBox3D(nullptr) {}
  ~BoundingBox3D() override;
  explicit PROTOBUF_CONSTEXPR BoundingBox3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoundingBox3D(const BoundingBox3D& from);
  BoundingBox3D(BoundingBox3D&& from) noexcept
    : BoundingBox3D() {
    *this = ::std::move(from);
  }

  inline BoundingBox3D& operator=(const BoundingBox3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundingBox3D& operator=(BoundingBox3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoundingBox3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoundingBox3D* internal_default_instance() {
    return reinterpret_cast<const BoundingBox3D*>(
               &_BoundingBox3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BoundingBox3D& a, BoundingBox3D& b) {
    a.Swap(&b);
  }
  inline void Swap(BoundingBox3D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoundingBox3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoundingBox3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoundingBox3D>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoundingBox3D& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BoundingBox3D& from) {
    BoundingBox3D::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoundingBox3D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prescan.common.BoundingBox3D";
  }
  protected:
  explicit BoundingBox3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeXFieldNumber = 1,
    kSizeYFieldNumber = 2,
    kSizeZFieldNumber = 3,
  };
  // optional double size_x = 1 [default = nan];
  bool has_size_x() const;
  private:
  bool _internal_has_size_x() const;
  public:
  void clear_size_x();
  double size_x() const;
  void set_size_x(double value);
  private:
  double _internal_size_x() const;
  void _internal_set_size_x(double value);
  public:

  // optional double size_y = 2 [default = nan];
  bool has_size_y() const;
  private:
  bool _internal_has_size_y() const;
  public:
  void clear_size_y();
  double size_y() const;
  void set_size_y(double value);
  private:
  double _internal_size_y() const;
  void _internal_set_size_y(double value);
  public:

  // optional double size_z = 3 [default = nan];
  bool has_size_z() const;
  private:
  bool _internal_has_size_z() const;
  public:
  void clear_size_z();
  double size_z() const;
  void set_size_z(double value);
  private:
  double _internal_size_z() const;
  void _internal_set_size_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:prescan.common.BoundingBox3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double size_x_;
    double size_y_;
    double size_z_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bridge_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class Quaternion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prescan.common.Quaternion) */ {
 public:
  inline Quaternion() : Quaternion(nullptr) {}
  ~Quaternion() override;
  explicit PROTOBUF_CONSTEXPR Quaternion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Quaternion(const Quaternion& from);
  Quaternion(Quaternion&& from) noexcept
    : Quaternion() {
    *this = ::std::move(from);
  }

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion& operator=(Quaternion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Quaternion& default_instance() {
    return *internal_default_instance();
  }
  static inline const Quaternion* internal_default_instance() {
    return reinterpret_cast<const Quaternion*>(
               &_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Quaternion& a, Quaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaternion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quaternion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Quaternion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Quaternion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Quaternion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Quaternion& from) {
    Quaternion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaternion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prescan.common.Quaternion";
  }
  protected:
  explicit Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQxFieldNumber = 1,
    kQyFieldNumber = 2,
    kQzFieldNumber = 3,
    kQwFieldNumber = 4,
  };
  // optional double qx = 1 [default = nan];
  bool has_qx() const;
  private:
  bool _internal_has_qx() const;
  public:
  void clear_qx();
  double qx() const;
  void set_qx(double value);
  private:
  double _internal_qx() const;
  void _internal_set_qx(double value);
  public:

  // optional double qy = 2 [default = nan];
  bool has_qy() const;
  private:
  bool _internal_has_qy() const;
  public:
  void clear_qy();
  double qy() const;
  void set_qy(double value);
  private:
  double _internal_qy() const;
  void _internal_set_qy(double value);
  public:

  // optional double qz = 3 [default = nan];
  bool has_qz() const;
  private:
  bool _internal_has_qz() const;
  public:
  void clear_qz();
  double qz() const;
  void set_qz(double value);
  private:
  double _internal_qz() const;
  void _internal_set_qz(double value);
  public:

  // optional double qw = 4 [default = nan];
  bool has_qw() const;
  private:
  bool _internal_has_qw() const;
  public:
  void clear_qw();
  double qw() const;
  void set_qw(double value);
  private:
  double _internal_qw() const;
  void _internal_set_qw(double value);
  public:

  // @@protoc_insertion_point(class_scope:prescan.common.Quaternion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double qx_;
    double qy_;
    double qz_;
    double qw_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bridge_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto;
};
// -------------------------------------------------------------------

class Polygon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prescan.common.Polygon) */ {
 public:
  inline Polygon() : Polygon(nullptr) {}
  ~Polygon() override;
  explicit PROTOBUF_CONSTEXPR Polygon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Polygon(const Polygon& from);
  Polygon(Polygon&& from) noexcept
    : Polygon() {
    *this = ::std::move(from);
  }

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Polygon& operator=(Polygon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Polygon& default_instance() {
    return *internal_default_instance();
  }
  static inline const Polygon* internal_default_instance() {
    return reinterpret_cast<const Polygon*>(
               &_Polygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Polygon& a, Polygon& b) {
    a.Swap(&b);
  }
  inline void Swap(Polygon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Polygon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Polygon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Polygon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Polygon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Polygon& from) {
    Polygon::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Polygon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prescan.common.Polygon";
  }
  protected:
  explicit Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
  };
  // repeated .prescan.common.Point3D point = 1;
  int point_size() const;
  private:
  int _internal_point_size() const;
  public:
  void clear_point();
  ::prescan::common::Point3D* mutable_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prescan::common::Point3D >*
      mutable_point();
  private:
  const ::prescan::common::Point3D& _internal_point(int index) const;
  ::prescan::common::Point3D* _internal_add_point();
  public:
  const ::prescan::common::Point3D& point(int index) const;
  ::prescan::common::Point3D* add_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prescan::common::Point3D >&
      point() const;

  // @@protoc_insertion_point(class_scope:prescan.common.Polygon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prescan::common::Point3D > point_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bridge_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point2D

// optional double x = 1 [default = nan];
inline bool Point2D::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Point2D::has_x() const {
  return _internal_has_x();
}
inline void Point2D::clear_x() {
  _impl_.x_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Point2D::_internal_x() const {
  return _impl_.x_;
}
inline double Point2D::x() const {
  // @@protoc_insertion_point(field_get:prescan.common.Point2D.x)
  return _internal_x();
}
inline void Point2D::_internal_set_x(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void Point2D::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:prescan.common.Point2D.x)
}

// optional double y = 2 [default = nan];
inline bool Point2D::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Point2D::has_y() const {
  return _internal_has_y();
}
inline void Point2D::clear_y() {
  _impl_.y_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Point2D::_internal_y() const {
  return _impl_.y_;
}
inline double Point2D::y() const {
  // @@protoc_insertion_point(field_get:prescan.common.Point2D.y)
  return _internal_y();
}
inline void Point2D::_internal_set_y(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void Point2D::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:prescan.common.Point2D.y)
}

// -------------------------------------------------------------------

// Point3D

// optional double x = 1 [default = nan];
inline bool Point3D::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Point3D::has_x() const {
  return _internal_has_x();
}
inline void Point3D::clear_x() {
  _impl_.x_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Point3D::_internal_x() const {
  return _impl_.x_;
}
inline double Point3D::x() const {
  // @@protoc_insertion_point(field_get:prescan.common.Point3D.x)
  return _internal_x();
}
inline void Point3D::_internal_set_x(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void Point3D::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:prescan.common.Point3D.x)
}

// optional double y = 2 [default = nan];
inline bool Point3D::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Point3D::has_y() const {
  return _internal_has_y();
}
inline void Point3D::clear_y() {
  _impl_.y_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Point3D::_internal_y() const {
  return _impl_.y_;
}
inline double Point3D::y() const {
  // @@protoc_insertion_point(field_get:prescan.common.Point3D.y)
  return _internal_y();
}
inline void Point3D::_internal_set_y(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void Point3D::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:prescan.common.Point3D.y)
}

// optional double z = 3 [default = nan];
inline bool Point3D::_internal_has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Point3D::has_z() const {
  return _internal_has_z();
}
inline void Point3D::clear_z() {
  _impl_.z_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Point3D::_internal_z() const {
  return _impl_.z_;
}
inline double Point3D::z() const {
  // @@protoc_insertion_point(field_get:prescan.common.Point3D.z)
  return _internal_z();
}
inline void Point3D::_internal_set_z(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.z_ = value;
}
inline void Point3D::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:prescan.common.Point3D.z)
}

// -------------------------------------------------------------------

// PointLLH

// optional double lat = 1 [default = nan];
inline bool PointLLH::_internal_has_lat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PointLLH::has_lat() const {
  return _internal_has_lat();
}
inline void PointLLH::clear_lat() {
  _impl_.lat_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double PointLLH::_internal_lat() const {
  return _impl_.lat_;
}
inline double PointLLH::lat() const {
  // @@protoc_insertion_point(field_get:prescan.common.PointLLH.lat)
  return _internal_lat();
}
inline void PointLLH::_internal_set_lat(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.lat_ = value;
}
inline void PointLLH::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:prescan.common.PointLLH.lat)
}

// optional double lon = 2 [default = nan];
inline bool PointLLH::_internal_has_lon() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PointLLH::has_lon() const {
  return _internal_has_lon();
}
inline void PointLLH::clear_lon() {
  _impl_.lon_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double PointLLH::_internal_lon() const {
  return _impl_.lon_;
}
inline double PointLLH::lon() const {
  // @@protoc_insertion_point(field_get:prescan.common.PointLLH.lon)
  return _internal_lon();
}
inline void PointLLH::_internal_set_lon(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.lon_ = value;
}
inline void PointLLH::set_lon(double value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:prescan.common.PointLLH.lon)
}

// optional double alt = 3 [default = nan];
inline bool PointLLH::_internal_has_alt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PointLLH::has_alt() const {
  return _internal_has_alt();
}
inline void PointLLH::clear_alt() {
  _impl_.alt_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double PointLLH::_internal_alt() const {
  return _impl_.alt_;
}
inline double PointLLH::alt() const {
  // @@protoc_insertion_point(field_get:prescan.common.PointLLH.alt)
  return _internal_alt();
}
inline void PointLLH::_internal_set_alt(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.alt_ = value;
}
inline void PointLLH::set_alt(double value) {
  _internal_set_alt(value);
  // @@protoc_insertion_point(field_set:prescan.common.PointLLH.alt)
}

// -------------------------------------------------------------------

// Orientation

// optional double roll = 1 [default = nan];
inline bool Orientation::_internal_has_roll() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Orientation::has_roll() const {
  return _internal_has_roll();
}
inline void Orientation::clear_roll() {
  _impl_.roll_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Orientation::_internal_roll() const {
  return _impl_.roll_;
}
inline double Orientation::roll() const {
  // @@protoc_insertion_point(field_get:prescan.common.Orientation.roll)
  return _internal_roll();
}
inline void Orientation::_internal_set_roll(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.roll_ = value;
}
inline void Orientation::set_roll(double value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:prescan.common.Orientation.roll)
}

// optional double pitch = 2 [default = nan];
inline bool Orientation::_internal_has_pitch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Orientation::has_pitch() const {
  return _internal_has_pitch();
}
inline void Orientation::clear_pitch() {
  _impl_.pitch_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Orientation::_internal_pitch() const {
  return _impl_.pitch_;
}
inline double Orientation::pitch() const {
  // @@protoc_insertion_point(field_get:prescan.common.Orientation.pitch)
  return _internal_pitch();
}
inline void Orientation::_internal_set_pitch(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pitch_ = value;
}
inline void Orientation::set_pitch(double value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:prescan.common.Orientation.pitch)
}

// optional double yaw = 3 [default = nan];
inline bool Orientation::_internal_has_yaw() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Orientation::has_yaw() const {
  return _internal_has_yaw();
}
inline void Orientation::clear_yaw() {
  _impl_.yaw_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Orientation::_internal_yaw() const {
  return _impl_.yaw_;
}
inline double Orientation::yaw() const {
  // @@protoc_insertion_point(field_get:prescan.common.Orientation.yaw)
  return _internal_yaw();
}
inline void Orientation::_internal_set_yaw(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.yaw_ = value;
}
inline void Orientation::set_yaw(double value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:prescan.common.Orientation.yaw)
}

// -------------------------------------------------------------------

// BBox2D

// optional double xmin = 1;
inline bool BBox2D::_internal_has_xmin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BBox2D::has_xmin() const {
  return _internal_has_xmin();
}
inline void BBox2D::clear_xmin() {
  _impl_.xmin_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double BBox2D::_internal_xmin() const {
  return _impl_.xmin_;
}
inline double BBox2D::xmin() const {
  // @@protoc_insertion_point(field_get:prescan.common.BBox2D.xmin)
  return _internal_xmin();
}
inline void BBox2D::_internal_set_xmin(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.xmin_ = value;
}
inline void BBox2D::set_xmin(double value) {
  _internal_set_xmin(value);
  // @@protoc_insertion_point(field_set:prescan.common.BBox2D.xmin)
}

// optional double ymin = 2;
inline bool BBox2D::_internal_has_ymin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BBox2D::has_ymin() const {
  return _internal_has_ymin();
}
inline void BBox2D::clear_ymin() {
  _impl_.ymin_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double BBox2D::_internal_ymin() const {
  return _impl_.ymin_;
}
inline double BBox2D::ymin() const {
  // @@protoc_insertion_point(field_get:prescan.common.BBox2D.ymin)
  return _internal_ymin();
}
inline void BBox2D::_internal_set_ymin(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ymin_ = value;
}
inline void BBox2D::set_ymin(double value) {
  _internal_set_ymin(value);
  // @@protoc_insertion_point(field_set:prescan.common.BBox2D.ymin)
}

// optional double xmax = 3;
inline bool BBox2D::_internal_has_xmax() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BBox2D::has_xmax() const {
  return _internal_has_xmax();
}
inline void BBox2D::clear_xmax() {
  _impl_.xmax_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double BBox2D::_internal_xmax() const {
  return _impl_.xmax_;
}
inline double BBox2D::xmax() const {
  // @@protoc_insertion_point(field_get:prescan.common.BBox2D.xmax)
  return _internal_xmax();
}
inline void BBox2D::_internal_set_xmax(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.xmax_ = value;
}
inline void BBox2D::set_xmax(double value) {
  _internal_set_xmax(value);
  // @@protoc_insertion_point(field_set:prescan.common.BBox2D.xmax)
}

// optional double ymax = 4;
inline bool BBox2D::_internal_has_ymax() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BBox2D::has_ymax() const {
  return _internal_has_ymax();
}
inline void BBox2D::clear_ymax() {
  _impl_.ymax_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double BBox2D::_internal_ymax() const {
  return _impl_.ymax_;
}
inline double BBox2D::ymax() const {
  // @@protoc_insertion_point(field_get:prescan.common.BBox2D.ymax)
  return _internal_ymax();
}
inline void BBox2D::_internal_set_ymax(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.ymax_ = value;
}
inline void BBox2D::set_ymax(double value) {
  _internal_set_ymax(value);
  // @@protoc_insertion_point(field_set:prescan.common.BBox2D.ymax)
}

// -------------------------------------------------------------------

// BoundingBox3D

// optional double size_x = 1 [default = nan];
inline bool BoundingBox3D::_internal_has_size_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BoundingBox3D::has_size_x() const {
  return _internal_has_size_x();
}
inline void BoundingBox3D::clear_size_x() {
  _impl_.size_x_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double BoundingBox3D::_internal_size_x() const {
  return _impl_.size_x_;
}
inline double BoundingBox3D::size_x() const {
  // @@protoc_insertion_point(field_get:prescan.common.BoundingBox3D.size_x)
  return _internal_size_x();
}
inline void BoundingBox3D::_internal_set_size_x(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.size_x_ = value;
}
inline void BoundingBox3D::set_size_x(double value) {
  _internal_set_size_x(value);
  // @@protoc_insertion_point(field_set:prescan.common.BoundingBox3D.size_x)
}

// optional double size_y = 2 [default = nan];
inline bool BoundingBox3D::_internal_has_size_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BoundingBox3D::has_size_y() const {
  return _internal_has_size_y();
}
inline void BoundingBox3D::clear_size_y() {
  _impl_.size_y_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double BoundingBox3D::_internal_size_y() const {
  return _impl_.size_y_;
}
inline double BoundingBox3D::size_y() const {
  // @@protoc_insertion_point(field_get:prescan.common.BoundingBox3D.size_y)
  return _internal_size_y();
}
inline void BoundingBox3D::_internal_set_size_y(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.size_y_ = value;
}
inline void BoundingBox3D::set_size_y(double value) {
  _internal_set_size_y(value);
  // @@protoc_insertion_point(field_set:prescan.common.BoundingBox3D.size_y)
}

// optional double size_z = 3 [default = nan];
inline bool BoundingBox3D::_internal_has_size_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BoundingBox3D::has_size_z() const {
  return _internal_has_size_z();
}
inline void BoundingBox3D::clear_size_z() {
  _impl_.size_z_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double BoundingBox3D::_internal_size_z() const {
  return _impl_.size_z_;
}
inline double BoundingBox3D::size_z() const {
  // @@protoc_insertion_point(field_get:prescan.common.BoundingBox3D.size_z)
  return _internal_size_z();
}
inline void BoundingBox3D::_internal_set_size_z(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.size_z_ = value;
}
inline void BoundingBox3D::set_size_z(double value) {
  _internal_set_size_z(value);
  // @@protoc_insertion_point(field_set:prescan.common.BoundingBox3D.size_z)
}

// -------------------------------------------------------------------

// Quaternion

// optional double qx = 1 [default = nan];
inline bool Quaternion::_internal_has_qx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Quaternion::has_qx() const {
  return _internal_has_qx();
}
inline void Quaternion::clear_qx() {
  _impl_.qx_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Quaternion::_internal_qx() const {
  return _impl_.qx_;
}
inline double Quaternion::qx() const {
  // @@protoc_insertion_point(field_get:prescan.common.Quaternion.qx)
  return _internal_qx();
}
inline void Quaternion::_internal_set_qx(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.qx_ = value;
}
inline void Quaternion::set_qx(double value) {
  _internal_set_qx(value);
  // @@protoc_insertion_point(field_set:prescan.common.Quaternion.qx)
}

// optional double qy = 2 [default = nan];
inline bool Quaternion::_internal_has_qy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Quaternion::has_qy() const {
  return _internal_has_qy();
}
inline void Quaternion::clear_qy() {
  _impl_.qy_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Quaternion::_internal_qy() const {
  return _impl_.qy_;
}
inline double Quaternion::qy() const {
  // @@protoc_insertion_point(field_get:prescan.common.Quaternion.qy)
  return _internal_qy();
}
inline void Quaternion::_internal_set_qy(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.qy_ = value;
}
inline void Quaternion::set_qy(double value) {
  _internal_set_qy(value);
  // @@protoc_insertion_point(field_set:prescan.common.Quaternion.qy)
}

// optional double qz = 3 [default = nan];
inline bool Quaternion::_internal_has_qz() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Quaternion::has_qz() const {
  return _internal_has_qz();
}
inline void Quaternion::clear_qz() {
  _impl_.qz_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Quaternion::_internal_qz() const {
  return _impl_.qz_;
}
inline double Quaternion::qz() const {
  // @@protoc_insertion_point(field_get:prescan.common.Quaternion.qz)
  return _internal_qz();
}
inline void Quaternion::_internal_set_qz(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.qz_ = value;
}
inline void Quaternion::set_qz(double value) {
  _internal_set_qz(value);
  // @@protoc_insertion_point(field_set:prescan.common.Quaternion.qz)
}

// optional double qw = 4 [default = nan];
inline bool Quaternion::_internal_has_qw() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Quaternion::has_qw() const {
  return _internal_has_qw();
}
inline void Quaternion::clear_qw() {
  _impl_.qw_ = std::numeric_limits<double>::quiet_NaN();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double Quaternion::_internal_qw() const {
  return _impl_.qw_;
}
inline double Quaternion::qw() const {
  // @@protoc_insertion_point(field_get:prescan.common.Quaternion.qw)
  return _internal_qw();
}
inline void Quaternion::_internal_set_qw(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.qw_ = value;
}
inline void Quaternion::set_qw(double value) {
  _internal_set_qw(value);
  // @@protoc_insertion_point(field_set:prescan.common.Quaternion.qw)
}

// -------------------------------------------------------------------

// Polygon

// repeated .prescan.common.Point3D point = 1;
inline int Polygon::_internal_point_size() const {
  return _impl_.point_.size();
}
inline int Polygon::point_size() const {
  return _internal_point_size();
}
inline void Polygon::clear_point() {
  _impl_.point_.Clear();
}
inline ::prescan::common::Point3D* Polygon::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:prescan.common.Polygon.point)
  return _impl_.point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prescan::common::Point3D >*
Polygon::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:prescan.common.Polygon.point)
  return &_impl_.point_;
}
inline const ::prescan::common::Point3D& Polygon::_internal_point(int index) const {
  return _impl_.point_.Get(index);
}
inline const ::prescan::common::Point3D& Polygon::point(int index) const {
  // @@protoc_insertion_point(field_get:prescan.common.Polygon.point)
  return _internal_point(index);
}
inline ::prescan::common::Point3D* Polygon::_internal_add_point() {
  return _impl_.point_.Add();
}
inline ::prescan::common::Point3D* Polygon::add_point() {
  ::prescan::common::Point3D* _add = _internal_add_point();
  // @@protoc_insertion_point(field_add:prescan.common.Polygon.point)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prescan::common::Point3D >&
Polygon::point() const {
  // @@protoc_insertion_point(field_list:prescan.common.Polygon.point)
  return _impl_.point_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace prescan

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bridge_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto
