// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bridge_msgs/localiztion_msgs/localization.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bridge_msgs/basic_msgs/header.pb.h"
#include "bridge_msgs/basic_msgs/geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto;
namespace prescan {
namespace localization {
class Gps;
struct GpsDefaultTypeInternal;
extern GpsDefaultTypeInternal _Gps_default_instance_;
class Imu;
struct ImuDefaultTypeInternal;
extern ImuDefaultTypeInternal _Imu_default_instance_;
class LocalizationStatus;
struct LocalizationStatusDefaultTypeInternal;
extern LocalizationStatusDefaultTypeInternal _LocalizationStatus_default_instance_;
class Pose;
struct PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
}  // namespace localization
}  // namespace prescan
PROTOBUF_NAMESPACE_OPEN
template<> ::prescan::localization::Gps* Arena::CreateMaybeMessage<::prescan::localization::Gps>(Arena*);
template<> ::prescan::localization::Imu* Arena::CreateMaybeMessage<::prescan::localization::Imu>(Arena*);
template<> ::prescan::localization::LocalizationStatus* Arena::CreateMaybeMessage<::prescan::localization::LocalizationStatus>(Arena*);
template<> ::prescan::localization::Pose* Arena::CreateMaybeMessage<::prescan::localization::Pose>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace prescan {
namespace localization {

// ===================================================================

class Gps final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prescan.localization.Gps) */ {
 public:
  inline Gps() : Gps(nullptr) {}
  ~Gps() override;
  explicit PROTOBUF_CONSTEXPR Gps(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Gps(const Gps& from);
  Gps(Gps&& from) noexcept
    : Gps() {
    *this = ::std::move(from);
  }

  inline Gps& operator=(const Gps& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gps& operator=(Gps&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Gps& default_instance() {
    return *internal_default_instance();
  }
  static inline const Gps* internal_default_instance() {
    return reinterpret_cast<const Gps*>(
               &_Gps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Gps& a, Gps& b) {
    a.Swap(&b);
  }
  inline void Swap(Gps* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Gps* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Gps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Gps>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Gps& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Gps& from) {
    Gps::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gps* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prescan.localization.Gps";
  }
  protected:
  explicit Gps(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kLlhFieldNumber = 2,
    kHeadingFieldNumber = 5,
  };
  // optional .prescan.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::prescan::common::Header& header() const;
  PROTOBUF_NODISCARD ::prescan::common::Header* release_header();
  ::prescan::common::Header* mutable_header();
  void set_allocated_header(::prescan::common::Header* header);
  private:
  const ::prescan::common::Header& _internal_header() const;
  ::prescan::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::prescan::common::Header* header);
  ::prescan::common::Header* unsafe_arena_release_header();

  // optional .prescan.common.PointLLH llh = 2;
  bool has_llh() const;
  private:
  bool _internal_has_llh() const;
  public:
  void clear_llh();
  const ::prescan::common::PointLLH& llh() const;
  PROTOBUF_NODISCARD ::prescan::common::PointLLH* release_llh();
  ::prescan::common::PointLLH* mutable_llh();
  void set_allocated_llh(::prescan::common::PointLLH* llh);
  private:
  const ::prescan::common::PointLLH& _internal_llh() const;
  ::prescan::common::PointLLH* _internal_mutable_llh();
  public:
  void unsafe_arena_set_allocated_llh(
      ::prescan::common::PointLLH* llh);
  ::prescan::common::PointLLH* unsafe_arena_release_llh();

  // optional double heading = 5;
  bool has_heading() const;
  private:
  bool _internal_has_heading() const;
  public:
  void clear_heading();
  double heading() const;
  void set_heading(double value);
  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);
  public:

  // @@protoc_insertion_point(class_scope:prescan.localization.Gps)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::prescan::common::Header* header_;
    ::prescan::common::PointLLH* llh_;
    double heading_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto;
};
// -------------------------------------------------------------------

class Pose final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prescan.localization.Pose) */ {
 public:
  inline Pose() : Pose(nullptr) {}
  ~Pose() override;
  explicit PROTOBUF_CONSTEXPR Pose(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pose(const Pose& from);
  Pose(Pose&& from) noexcept
    : Pose() {
    *this = ::std::move(from);
  }

  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose& operator=(Pose&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pose& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pose* internal_default_instance() {
    return reinterpret_cast<const Pose*>(
               &_Pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Pose& a, Pose& b) {
    a.Swap(&b);
  }
  inline void Swap(Pose* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pose>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pose& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Pose& from) {
    Pose::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prescan.localization.Pose";
  }
  protected:
  explicit Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kXyzFieldNumber = 2,
  };
  // optional .prescan.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::prescan::common::Header& header() const;
  PROTOBUF_NODISCARD ::prescan::common::Header* release_header();
  ::prescan::common::Header* mutable_header();
  void set_allocated_header(::prescan::common::Header* header);
  private:
  const ::prescan::common::Header& _internal_header() const;
  ::prescan::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::prescan::common::Header* header);
  ::prescan::common::Header* unsafe_arena_release_header();

  // optional .prescan.common.Point3D xyz = 2;
  bool has_xyz() const;
  private:
  bool _internal_has_xyz() const;
  public:
  void clear_xyz();
  const ::prescan::common::Point3D& xyz() const;
  PROTOBUF_NODISCARD ::prescan::common::Point3D* release_xyz();
  ::prescan::common::Point3D* mutable_xyz();
  void set_allocated_xyz(::prescan::common::Point3D* xyz);
  private:
  const ::prescan::common::Point3D& _internal_xyz() const;
  ::prescan::common::Point3D* _internal_mutable_xyz();
  public:
  void unsafe_arena_set_allocated_xyz(
      ::prescan::common::Point3D* xyz);
  ::prescan::common::Point3D* unsafe_arena_release_xyz();

  // @@protoc_insertion_point(class_scope:prescan.localization.Pose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::prescan::common::Header* header_;
    ::prescan::common::Point3D* xyz_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto;
};
// -------------------------------------------------------------------

class Imu final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prescan.localization.Imu) */ {
 public:
  inline Imu() : Imu(nullptr) {}
  ~Imu() override;
  explicit PROTOBUF_CONSTEXPR Imu(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Imu(const Imu& from);
  Imu(Imu&& from) noexcept
    : Imu() {
    *this = ::std::move(from);
  }

  inline Imu& operator=(const Imu& from) {
    CopyFrom(from);
    return *this;
  }
  inline Imu& operator=(Imu&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Imu& default_instance() {
    return *internal_default_instance();
  }
  static inline const Imu* internal_default_instance() {
    return reinterpret_cast<const Imu*>(
               &_Imu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Imu& a, Imu& b) {
    a.Swap(&b);
  }
  inline void Swap(Imu* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Imu* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Imu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Imu>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Imu& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Imu& from) {
    Imu::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Imu* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prescan.localization.Imu";
  }
  protected:
  explicit Imu(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kOrientationFieldNumber = 2,
    kOrientationRateFieldNumber = 7,
    kAccelerationFieldNumber = 12,
  };
  // optional .prescan.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::prescan::common::Header& header() const;
  PROTOBUF_NODISCARD ::prescan::common::Header* release_header();
  ::prescan::common::Header* mutable_header();
  void set_allocated_header(::prescan::common::Header* header);
  private:
  const ::prescan::common::Header& _internal_header() const;
  ::prescan::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::prescan::common::Header* header);
  ::prescan::common::Header* unsafe_arena_release_header();

  // optional .prescan.common.Orientation orientation = 2;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::prescan::common::Orientation& orientation() const;
  PROTOBUF_NODISCARD ::prescan::common::Orientation* release_orientation();
  ::prescan::common::Orientation* mutable_orientation();
  void set_allocated_orientation(::prescan::common::Orientation* orientation);
  private:
  const ::prescan::common::Orientation& _internal_orientation() const;
  ::prescan::common::Orientation* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::prescan::common::Orientation* orientation);
  ::prescan::common::Orientation* unsafe_arena_release_orientation();

  // optional .prescan.common.Orientation orientation_rate = 7;
  bool has_orientation_rate() const;
  private:
  bool _internal_has_orientation_rate() const;
  public:
  void clear_orientation_rate();
  const ::prescan::common::Orientation& orientation_rate() const;
  PROTOBUF_NODISCARD ::prescan::common::Orientation* release_orientation_rate();
  ::prescan::common::Orientation* mutable_orientation_rate();
  void set_allocated_orientation_rate(::prescan::common::Orientation* orientation_rate);
  private:
  const ::prescan::common::Orientation& _internal_orientation_rate() const;
  ::prescan::common::Orientation* _internal_mutable_orientation_rate();
  public:
  void unsafe_arena_set_allocated_orientation_rate(
      ::prescan::common::Orientation* orientation_rate);
  ::prescan::common::Orientation* unsafe_arena_release_orientation_rate();

  // optional .prescan.common.Point3D acceleration = 12;
  bool has_acceleration() const;
  private:
  bool _internal_has_acceleration() const;
  public:
  void clear_acceleration();
  const ::prescan::common::Point3D& acceleration() const;
  PROTOBUF_NODISCARD ::prescan::common::Point3D* release_acceleration();
  ::prescan::common::Point3D* mutable_acceleration();
  void set_allocated_acceleration(::prescan::common::Point3D* acceleration);
  private:
  const ::prescan::common::Point3D& _internal_acceleration() const;
  ::prescan::common::Point3D* _internal_mutable_acceleration();
  public:
  void unsafe_arena_set_allocated_acceleration(
      ::prescan::common::Point3D* acceleration);
  ::prescan::common::Point3D* unsafe_arena_release_acceleration();

  // @@protoc_insertion_point(class_scope:prescan.localization.Imu)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::prescan::common::Header* header_;
    ::prescan::common::Orientation* orientation_;
    ::prescan::common::Orientation* orientation_rate_;
    ::prescan::common::Point3D* acceleration_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto;
};
// -------------------------------------------------------------------

class LocalizationStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prescan.localization.LocalizationStatus) */ {
 public:
  inline LocalizationStatus() : LocalizationStatus(nullptr) {}
  ~LocalizationStatus() override;
  explicit PROTOBUF_CONSTEXPR LocalizationStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalizationStatus(const LocalizationStatus& from);
  LocalizationStatus(LocalizationStatus&& from) noexcept
    : LocalizationStatus() {
    *this = ::std::move(from);
  }

  inline LocalizationStatus& operator=(const LocalizationStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalizationStatus& operator=(LocalizationStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocalizationStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalizationStatus* internal_default_instance() {
    return reinterpret_cast<const LocalizationStatus*>(
               &_LocalizationStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LocalizationStatus& a, LocalizationStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalizationStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalizationStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalizationStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalizationStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocalizationStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LocalizationStatus& from) {
    LocalizationStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalizationStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prescan.localization.LocalizationStatus";
  }
  protected:
  explicit LocalizationStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kGpsFieldNumber = 2,
    kImuFieldNumber = 3,
    kPoseFieldNumber = 4,
  };
  // optional .prescan.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::prescan::common::Header& header() const;
  PROTOBUF_NODISCARD ::prescan::common::Header* release_header();
  ::prescan::common::Header* mutable_header();
  void set_allocated_header(::prescan::common::Header* header);
  private:
  const ::prescan::common::Header& _internal_header() const;
  ::prescan::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::prescan::common::Header* header);
  ::prescan::common::Header* unsafe_arena_release_header();

  // optional .prescan.localization.Gps gps = 2;
  bool has_gps() const;
  private:
  bool _internal_has_gps() const;
  public:
  void clear_gps();
  const ::prescan::localization::Gps& gps() const;
  PROTOBUF_NODISCARD ::prescan::localization::Gps* release_gps();
  ::prescan::localization::Gps* mutable_gps();
  void set_allocated_gps(::prescan::localization::Gps* gps);
  private:
  const ::prescan::localization::Gps& _internal_gps() const;
  ::prescan::localization::Gps* _internal_mutable_gps();
  public:
  void unsafe_arena_set_allocated_gps(
      ::prescan::localization::Gps* gps);
  ::prescan::localization::Gps* unsafe_arena_release_gps();

  // optional .prescan.localization.Imu imu = 3;
  bool has_imu() const;
  private:
  bool _internal_has_imu() const;
  public:
  void clear_imu();
  const ::prescan::localization::Imu& imu() const;
  PROTOBUF_NODISCARD ::prescan::localization::Imu* release_imu();
  ::prescan::localization::Imu* mutable_imu();
  void set_allocated_imu(::prescan::localization::Imu* imu);
  private:
  const ::prescan::localization::Imu& _internal_imu() const;
  ::prescan::localization::Imu* _internal_mutable_imu();
  public:
  void unsafe_arena_set_allocated_imu(
      ::prescan::localization::Imu* imu);
  ::prescan::localization::Imu* unsafe_arena_release_imu();

  // optional .prescan.localization.Pose pose = 4;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::prescan::localization::Pose& pose() const;
  PROTOBUF_NODISCARD ::prescan::localization::Pose* release_pose();
  ::prescan::localization::Pose* mutable_pose();
  void set_allocated_pose(::prescan::localization::Pose* pose);
  private:
  const ::prescan::localization::Pose& _internal_pose() const;
  ::prescan::localization::Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::prescan::localization::Pose* pose);
  ::prescan::localization::Pose* unsafe_arena_release_pose();

  // @@protoc_insertion_point(class_scope:prescan.localization.LocalizationStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::prescan::common::Header* header_;
    ::prescan::localization::Gps* gps_;
    ::prescan::localization::Imu* imu_;
    ::prescan::localization::Pose* pose_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Gps

// optional .prescan.common.Header header = 1;
inline bool Gps::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool Gps::has_header() const {
  return _internal_has_header();
}
inline const ::prescan::common::Header& Gps::_internal_header() const {
  const ::prescan::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::prescan::common::Header&>(
      ::prescan::common::_Header_default_instance_);
}
inline const ::prescan::common::Header& Gps::header() const {
  // @@protoc_insertion_point(field_get:prescan.localization.Gps.header)
  return _internal_header();
}
inline void Gps::unsafe_arena_set_allocated_header(
    ::prescan::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prescan.localization.Gps.header)
}
inline ::prescan::common::Header* Gps::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prescan::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::prescan::common::Header* Gps::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:prescan.localization.Gps.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prescan::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::prescan::common::Header* Gps::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::prescan::common::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::prescan::common::Header* Gps::mutable_header() {
  ::prescan::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:prescan.localization.Gps.header)
  return _msg;
}
inline void Gps::set_allocated_header(::prescan::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:prescan.localization.Gps.header)
}

// optional .prescan.common.PointLLH llh = 2;
inline bool Gps::_internal_has_llh() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.llh_ != nullptr);
  return value;
}
inline bool Gps::has_llh() const {
  return _internal_has_llh();
}
inline const ::prescan::common::PointLLH& Gps::_internal_llh() const {
  const ::prescan::common::PointLLH* p = _impl_.llh_;
  return p != nullptr ? *p : reinterpret_cast<const ::prescan::common::PointLLH&>(
      ::prescan::common::_PointLLH_default_instance_);
}
inline const ::prescan::common::PointLLH& Gps::llh() const {
  // @@protoc_insertion_point(field_get:prescan.localization.Gps.llh)
  return _internal_llh();
}
inline void Gps::unsafe_arena_set_allocated_llh(
    ::prescan::common::PointLLH* llh) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.llh_);
  }
  _impl_.llh_ = llh;
  if (llh) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prescan.localization.Gps.llh)
}
inline ::prescan::common::PointLLH* Gps::release_llh() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::prescan::common::PointLLH* temp = _impl_.llh_;
  _impl_.llh_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::prescan::common::PointLLH* Gps::unsafe_arena_release_llh() {
  // @@protoc_insertion_point(field_release:prescan.localization.Gps.llh)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::prescan::common::PointLLH* temp = _impl_.llh_;
  _impl_.llh_ = nullptr;
  return temp;
}
inline ::prescan::common::PointLLH* Gps::_internal_mutable_llh() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.llh_ == nullptr) {
    auto* p = CreateMaybeMessage<::prescan::common::PointLLH>(GetArenaForAllocation());
    _impl_.llh_ = p;
  }
  return _impl_.llh_;
}
inline ::prescan::common::PointLLH* Gps::mutable_llh() {
  ::prescan::common::PointLLH* _msg = _internal_mutable_llh();
  // @@protoc_insertion_point(field_mutable:prescan.localization.Gps.llh)
  return _msg;
}
inline void Gps::set_allocated_llh(::prescan::common::PointLLH* llh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.llh_);
  }
  if (llh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(llh));
    if (message_arena != submessage_arena) {
      llh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, llh, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.llh_ = llh;
  // @@protoc_insertion_point(field_set_allocated:prescan.localization.Gps.llh)
}

// optional double heading = 5;
inline bool Gps::_internal_has_heading() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Gps::has_heading() const {
  return _internal_has_heading();
}
inline void Gps::clear_heading() {
  _impl_.heading_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Gps::_internal_heading() const {
  return _impl_.heading_;
}
inline double Gps::heading() const {
  // @@protoc_insertion_point(field_get:prescan.localization.Gps.heading)
  return _internal_heading();
}
inline void Gps::_internal_set_heading(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.heading_ = value;
}
inline void Gps::set_heading(double value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:prescan.localization.Gps.heading)
}

// -------------------------------------------------------------------

// Pose

// optional .prescan.common.Header header = 1;
inline bool Pose::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool Pose::has_header() const {
  return _internal_has_header();
}
inline const ::prescan::common::Header& Pose::_internal_header() const {
  const ::prescan::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::prescan::common::Header&>(
      ::prescan::common::_Header_default_instance_);
}
inline const ::prescan::common::Header& Pose::header() const {
  // @@protoc_insertion_point(field_get:prescan.localization.Pose.header)
  return _internal_header();
}
inline void Pose::unsafe_arena_set_allocated_header(
    ::prescan::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prescan.localization.Pose.header)
}
inline ::prescan::common::Header* Pose::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prescan::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::prescan::common::Header* Pose::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:prescan.localization.Pose.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prescan::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::prescan::common::Header* Pose::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::prescan::common::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::prescan::common::Header* Pose::mutable_header() {
  ::prescan::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:prescan.localization.Pose.header)
  return _msg;
}
inline void Pose::set_allocated_header(::prescan::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:prescan.localization.Pose.header)
}

// optional .prescan.common.Point3D xyz = 2;
inline bool Pose::_internal_has_xyz() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.xyz_ != nullptr);
  return value;
}
inline bool Pose::has_xyz() const {
  return _internal_has_xyz();
}
inline const ::prescan::common::Point3D& Pose::_internal_xyz() const {
  const ::prescan::common::Point3D* p = _impl_.xyz_;
  return p != nullptr ? *p : reinterpret_cast<const ::prescan::common::Point3D&>(
      ::prescan::common::_Point3D_default_instance_);
}
inline const ::prescan::common::Point3D& Pose::xyz() const {
  // @@protoc_insertion_point(field_get:prescan.localization.Pose.xyz)
  return _internal_xyz();
}
inline void Pose::unsafe_arena_set_allocated_xyz(
    ::prescan::common::Point3D* xyz) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.xyz_);
  }
  _impl_.xyz_ = xyz;
  if (xyz) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prescan.localization.Pose.xyz)
}
inline ::prescan::common::Point3D* Pose::release_xyz() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::prescan::common::Point3D* temp = _impl_.xyz_;
  _impl_.xyz_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::prescan::common::Point3D* Pose::unsafe_arena_release_xyz() {
  // @@protoc_insertion_point(field_release:prescan.localization.Pose.xyz)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::prescan::common::Point3D* temp = _impl_.xyz_;
  _impl_.xyz_ = nullptr;
  return temp;
}
inline ::prescan::common::Point3D* Pose::_internal_mutable_xyz() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.xyz_ == nullptr) {
    auto* p = CreateMaybeMessage<::prescan::common::Point3D>(GetArenaForAllocation());
    _impl_.xyz_ = p;
  }
  return _impl_.xyz_;
}
inline ::prescan::common::Point3D* Pose::mutable_xyz() {
  ::prescan::common::Point3D* _msg = _internal_mutable_xyz();
  // @@protoc_insertion_point(field_mutable:prescan.localization.Pose.xyz)
  return _msg;
}
inline void Pose::set_allocated_xyz(::prescan::common::Point3D* xyz) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.xyz_);
  }
  if (xyz) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(xyz));
    if (message_arena != submessage_arena) {
      xyz = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, xyz, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.xyz_ = xyz;
  // @@protoc_insertion_point(field_set_allocated:prescan.localization.Pose.xyz)
}

// -------------------------------------------------------------------

// Imu

// optional .prescan.common.Header header = 1;
inline bool Imu::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool Imu::has_header() const {
  return _internal_has_header();
}
inline const ::prescan::common::Header& Imu::_internal_header() const {
  const ::prescan::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::prescan::common::Header&>(
      ::prescan::common::_Header_default_instance_);
}
inline const ::prescan::common::Header& Imu::header() const {
  // @@protoc_insertion_point(field_get:prescan.localization.Imu.header)
  return _internal_header();
}
inline void Imu::unsafe_arena_set_allocated_header(
    ::prescan::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prescan.localization.Imu.header)
}
inline ::prescan::common::Header* Imu::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prescan::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::prescan::common::Header* Imu::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:prescan.localization.Imu.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prescan::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::prescan::common::Header* Imu::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::prescan::common::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::prescan::common::Header* Imu::mutable_header() {
  ::prescan::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:prescan.localization.Imu.header)
  return _msg;
}
inline void Imu::set_allocated_header(::prescan::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:prescan.localization.Imu.header)
}

// optional .prescan.common.Orientation orientation = 2;
inline bool Imu::_internal_has_orientation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.orientation_ != nullptr);
  return value;
}
inline bool Imu::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::prescan::common::Orientation& Imu::_internal_orientation() const {
  const ::prescan::common::Orientation* p = _impl_.orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::prescan::common::Orientation&>(
      ::prescan::common::_Orientation_default_instance_);
}
inline const ::prescan::common::Orientation& Imu::orientation() const {
  // @@protoc_insertion_point(field_get:prescan.localization.Imu.orientation)
  return _internal_orientation();
}
inline void Imu::unsafe_arena_set_allocated_orientation(
    ::prescan::common::Orientation* orientation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_);
  }
  _impl_.orientation_ = orientation;
  if (orientation) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prescan.localization.Imu.orientation)
}
inline ::prescan::common::Orientation* Imu::release_orientation() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::prescan::common::Orientation* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::prescan::common::Orientation* Imu::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:prescan.localization.Imu.orientation)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::prescan::common::Orientation* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
  return temp;
}
inline ::prescan::common::Orientation* Imu::_internal_mutable_orientation() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::prescan::common::Orientation>(GetArenaForAllocation());
    _impl_.orientation_ = p;
  }
  return _impl_.orientation_;
}
inline ::prescan::common::Orientation* Imu::mutable_orientation() {
  ::prescan::common::Orientation* _msg = _internal_mutable_orientation();
  // @@protoc_insertion_point(field_mutable:prescan.localization.Imu.orientation)
  return _msg;
}
inline void Imu::set_allocated_orientation(::prescan::common::Orientation* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation));
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:prescan.localization.Imu.orientation)
}

// optional .prescan.common.Orientation orientation_rate = 7;
inline bool Imu::_internal_has_orientation_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.orientation_rate_ != nullptr);
  return value;
}
inline bool Imu::has_orientation_rate() const {
  return _internal_has_orientation_rate();
}
inline const ::prescan::common::Orientation& Imu::_internal_orientation_rate() const {
  const ::prescan::common::Orientation* p = _impl_.orientation_rate_;
  return p != nullptr ? *p : reinterpret_cast<const ::prescan::common::Orientation&>(
      ::prescan::common::_Orientation_default_instance_);
}
inline const ::prescan::common::Orientation& Imu::orientation_rate() const {
  // @@protoc_insertion_point(field_get:prescan.localization.Imu.orientation_rate)
  return _internal_orientation_rate();
}
inline void Imu::unsafe_arena_set_allocated_orientation_rate(
    ::prescan::common::Orientation* orientation_rate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_rate_);
  }
  _impl_.orientation_rate_ = orientation_rate;
  if (orientation_rate) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prescan.localization.Imu.orientation_rate)
}
inline ::prescan::common::Orientation* Imu::release_orientation_rate() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::prescan::common::Orientation* temp = _impl_.orientation_rate_;
  _impl_.orientation_rate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::prescan::common::Orientation* Imu::unsafe_arena_release_orientation_rate() {
  // @@protoc_insertion_point(field_release:prescan.localization.Imu.orientation_rate)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::prescan::common::Orientation* temp = _impl_.orientation_rate_;
  _impl_.orientation_rate_ = nullptr;
  return temp;
}
inline ::prescan::common::Orientation* Imu::_internal_mutable_orientation_rate() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.orientation_rate_ == nullptr) {
    auto* p = CreateMaybeMessage<::prescan::common::Orientation>(GetArenaForAllocation());
    _impl_.orientation_rate_ = p;
  }
  return _impl_.orientation_rate_;
}
inline ::prescan::common::Orientation* Imu::mutable_orientation_rate() {
  ::prescan::common::Orientation* _msg = _internal_mutable_orientation_rate();
  // @@protoc_insertion_point(field_mutable:prescan.localization.Imu.orientation_rate)
  return _msg;
}
inline void Imu::set_allocated_orientation_rate(::prescan::common::Orientation* orientation_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_rate_);
  }
  if (orientation_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_rate));
    if (message_arena != submessage_arena) {
      orientation_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation_rate, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.orientation_rate_ = orientation_rate;
  // @@protoc_insertion_point(field_set_allocated:prescan.localization.Imu.orientation_rate)
}

// optional .prescan.common.Point3D acceleration = 12;
inline bool Imu::_internal_has_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.acceleration_ != nullptr);
  return value;
}
inline bool Imu::has_acceleration() const {
  return _internal_has_acceleration();
}
inline const ::prescan::common::Point3D& Imu::_internal_acceleration() const {
  const ::prescan::common::Point3D* p = _impl_.acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::prescan::common::Point3D&>(
      ::prescan::common::_Point3D_default_instance_);
}
inline const ::prescan::common::Point3D& Imu::acceleration() const {
  // @@protoc_insertion_point(field_get:prescan.localization.Imu.acceleration)
  return _internal_acceleration();
}
inline void Imu::unsafe_arena_set_allocated_acceleration(
    ::prescan::common::Point3D* acceleration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.acceleration_);
  }
  _impl_.acceleration_ = acceleration;
  if (acceleration) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prescan.localization.Imu.acceleration)
}
inline ::prescan::common::Point3D* Imu::release_acceleration() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::prescan::common::Point3D* temp = _impl_.acceleration_;
  _impl_.acceleration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::prescan::common::Point3D* Imu::unsafe_arena_release_acceleration() {
  // @@protoc_insertion_point(field_release:prescan.localization.Imu.acceleration)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::prescan::common::Point3D* temp = _impl_.acceleration_;
  _impl_.acceleration_ = nullptr;
  return temp;
}
inline ::prescan::common::Point3D* Imu::_internal_mutable_acceleration() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::prescan::common::Point3D>(GetArenaForAllocation());
    _impl_.acceleration_ = p;
  }
  return _impl_.acceleration_;
}
inline ::prescan::common::Point3D* Imu::mutable_acceleration() {
  ::prescan::common::Point3D* _msg = _internal_mutable_acceleration();
  // @@protoc_insertion_point(field_mutable:prescan.localization.Imu.acceleration)
  return _msg;
}
inline void Imu::set_allocated_acceleration(::prescan::common::Point3D* acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.acceleration_);
  }
  if (acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acceleration));
    if (message_arena != submessage_arena) {
      acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:prescan.localization.Imu.acceleration)
}

// -------------------------------------------------------------------

// LocalizationStatus

// optional .prescan.common.Header header = 1;
inline bool LocalizationStatus::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool LocalizationStatus::has_header() const {
  return _internal_has_header();
}
inline const ::prescan::common::Header& LocalizationStatus::_internal_header() const {
  const ::prescan::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::prescan::common::Header&>(
      ::prescan::common::_Header_default_instance_);
}
inline const ::prescan::common::Header& LocalizationStatus::header() const {
  // @@protoc_insertion_point(field_get:prescan.localization.LocalizationStatus.header)
  return _internal_header();
}
inline void LocalizationStatus::unsafe_arena_set_allocated_header(
    ::prescan::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prescan.localization.LocalizationStatus.header)
}
inline ::prescan::common::Header* LocalizationStatus::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prescan::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::prescan::common::Header* LocalizationStatus::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:prescan.localization.LocalizationStatus.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prescan::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::prescan::common::Header* LocalizationStatus::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::prescan::common::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::prescan::common::Header* LocalizationStatus::mutable_header() {
  ::prescan::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:prescan.localization.LocalizationStatus.header)
  return _msg;
}
inline void LocalizationStatus::set_allocated_header(::prescan::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:prescan.localization.LocalizationStatus.header)
}

// optional .prescan.localization.Gps gps = 2;
inline bool LocalizationStatus::_internal_has_gps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gps_ != nullptr);
  return value;
}
inline bool LocalizationStatus::has_gps() const {
  return _internal_has_gps();
}
inline void LocalizationStatus::clear_gps() {
  if (_impl_.gps_ != nullptr) _impl_.gps_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::prescan::localization::Gps& LocalizationStatus::_internal_gps() const {
  const ::prescan::localization::Gps* p = _impl_.gps_;
  return p != nullptr ? *p : reinterpret_cast<const ::prescan::localization::Gps&>(
      ::prescan::localization::_Gps_default_instance_);
}
inline const ::prescan::localization::Gps& LocalizationStatus::gps() const {
  // @@protoc_insertion_point(field_get:prescan.localization.LocalizationStatus.gps)
  return _internal_gps();
}
inline void LocalizationStatus::unsafe_arena_set_allocated_gps(
    ::prescan::localization::Gps* gps) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gps_);
  }
  _impl_.gps_ = gps;
  if (gps) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prescan.localization.LocalizationStatus.gps)
}
inline ::prescan::localization::Gps* LocalizationStatus::release_gps() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::prescan::localization::Gps* temp = _impl_.gps_;
  _impl_.gps_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::prescan::localization::Gps* LocalizationStatus::unsafe_arena_release_gps() {
  // @@protoc_insertion_point(field_release:prescan.localization.LocalizationStatus.gps)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::prescan::localization::Gps* temp = _impl_.gps_;
  _impl_.gps_ = nullptr;
  return temp;
}
inline ::prescan::localization::Gps* LocalizationStatus::_internal_mutable_gps() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.gps_ == nullptr) {
    auto* p = CreateMaybeMessage<::prescan::localization::Gps>(GetArenaForAllocation());
    _impl_.gps_ = p;
  }
  return _impl_.gps_;
}
inline ::prescan::localization::Gps* LocalizationStatus::mutable_gps() {
  ::prescan::localization::Gps* _msg = _internal_mutable_gps();
  // @@protoc_insertion_point(field_mutable:prescan.localization.LocalizationStatus.gps)
  return _msg;
}
inline void LocalizationStatus::set_allocated_gps(::prescan::localization::Gps* gps) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.gps_;
  }
  if (gps) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gps);
    if (message_arena != submessage_arena) {
      gps = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gps, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.gps_ = gps;
  // @@protoc_insertion_point(field_set_allocated:prescan.localization.LocalizationStatus.gps)
}

// optional .prescan.localization.Imu imu = 3;
inline bool LocalizationStatus::_internal_has_imu() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.imu_ != nullptr);
  return value;
}
inline bool LocalizationStatus::has_imu() const {
  return _internal_has_imu();
}
inline void LocalizationStatus::clear_imu() {
  if (_impl_.imu_ != nullptr) _impl_.imu_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::prescan::localization::Imu& LocalizationStatus::_internal_imu() const {
  const ::prescan::localization::Imu* p = _impl_.imu_;
  return p != nullptr ? *p : reinterpret_cast<const ::prescan::localization::Imu&>(
      ::prescan::localization::_Imu_default_instance_);
}
inline const ::prescan::localization::Imu& LocalizationStatus::imu() const {
  // @@protoc_insertion_point(field_get:prescan.localization.LocalizationStatus.imu)
  return _internal_imu();
}
inline void LocalizationStatus::unsafe_arena_set_allocated_imu(
    ::prescan::localization::Imu* imu) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.imu_);
  }
  _impl_.imu_ = imu;
  if (imu) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prescan.localization.LocalizationStatus.imu)
}
inline ::prescan::localization::Imu* LocalizationStatus::release_imu() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::prescan::localization::Imu* temp = _impl_.imu_;
  _impl_.imu_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::prescan::localization::Imu* LocalizationStatus::unsafe_arena_release_imu() {
  // @@protoc_insertion_point(field_release:prescan.localization.LocalizationStatus.imu)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::prescan::localization::Imu* temp = _impl_.imu_;
  _impl_.imu_ = nullptr;
  return temp;
}
inline ::prescan::localization::Imu* LocalizationStatus::_internal_mutable_imu() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.imu_ == nullptr) {
    auto* p = CreateMaybeMessage<::prescan::localization::Imu>(GetArenaForAllocation());
    _impl_.imu_ = p;
  }
  return _impl_.imu_;
}
inline ::prescan::localization::Imu* LocalizationStatus::mutable_imu() {
  ::prescan::localization::Imu* _msg = _internal_mutable_imu();
  // @@protoc_insertion_point(field_mutable:prescan.localization.LocalizationStatus.imu)
  return _msg;
}
inline void LocalizationStatus::set_allocated_imu(::prescan::localization::Imu* imu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.imu_;
  }
  if (imu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(imu);
    if (message_arena != submessage_arena) {
      imu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imu, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.imu_ = imu;
  // @@protoc_insertion_point(field_set_allocated:prescan.localization.LocalizationStatus.imu)
}

// optional .prescan.localization.Pose pose = 4;
inline bool LocalizationStatus::_internal_has_pose() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pose_ != nullptr);
  return value;
}
inline bool LocalizationStatus::has_pose() const {
  return _internal_has_pose();
}
inline void LocalizationStatus::clear_pose() {
  if (_impl_.pose_ != nullptr) _impl_.pose_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::prescan::localization::Pose& LocalizationStatus::_internal_pose() const {
  const ::prescan::localization::Pose* p = _impl_.pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::prescan::localization::Pose&>(
      ::prescan::localization::_Pose_default_instance_);
}
inline const ::prescan::localization::Pose& LocalizationStatus::pose() const {
  // @@protoc_insertion_point(field_get:prescan.localization.LocalizationStatus.pose)
  return _internal_pose();
}
inline void LocalizationStatus::unsafe_arena_set_allocated_pose(
    ::prescan::localization::Pose* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  _impl_.pose_ = pose;
  if (pose) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prescan.localization.LocalizationStatus.pose)
}
inline ::prescan::localization::Pose* LocalizationStatus::release_pose() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::prescan::localization::Pose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::prescan::localization::Pose* LocalizationStatus::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:prescan.localization.LocalizationStatus.pose)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::prescan::localization::Pose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
  return temp;
}
inline ::prescan::localization::Pose* LocalizationStatus::_internal_mutable_pose() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::prescan::localization::Pose>(GetArenaForAllocation());
    _impl_.pose_ = p;
  }
  return _impl_.pose_;
}
inline ::prescan::localization::Pose* LocalizationStatus::mutable_pose() {
  ::prescan::localization::Pose* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:prescan.localization.LocalizationStatus.pose)
  return _msg;
}
inline void LocalizationStatus::set_allocated_pose(::prescan::localization::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pose);
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:prescan.localization.LocalizationStatus.pose)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace localization
}  // namespace prescan

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto
