// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bridge_msgs/control_msgs/control_cmd.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bridge_5fmsgs_2fcontrol_5fmsgs_2fcontrol_5fcmd_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bridge_5fmsgs_2fcontrol_5fmsgs_2fcontrol_5fcmd_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bridge_msgs/basic_msgs/header.pb.h"
#include "bridge_msgs/chassis_msgs/chassis.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bridge_5fmsgs_2fcontrol_5fmsgs_2fcontrol_5fcmd_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bridge_5fmsgs_2fcontrol_5fmsgs_2fcontrol_5fcmd_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bridge_5fmsgs_2fcontrol_5fmsgs_2fcontrol_5fcmd_2eproto;
namespace prescan {
namespace control {
class ControlCommand;
struct ControlCommandDefaultTypeInternal;
extern ControlCommandDefaultTypeInternal _ControlCommand_default_instance_;
}  // namespace control
}  // namespace prescan
PROTOBUF_NAMESPACE_OPEN
template<> ::prescan::control::ControlCommand* Arena::CreateMaybeMessage<::prescan::control::ControlCommand>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace prescan {
namespace control {

// ===================================================================

class ControlCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prescan.control.ControlCommand) */ {
 public:
  inline ControlCommand() : ControlCommand(nullptr) {}
  ~ControlCommand() override;
  explicit PROTOBUF_CONSTEXPR ControlCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlCommand(const ControlCommand& from);
  ControlCommand(ControlCommand&& from) noexcept
    : ControlCommand() {
    *this = ::std::move(from);
  }

  inline ControlCommand& operator=(const ControlCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlCommand& operator=(ControlCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlCommand* internal_default_instance() {
    return reinterpret_cast<const ControlCommand*>(
               &_ControlCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ControlCommand& a, ControlCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ControlCommand& from) {
    ControlCommand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prescan.control.ControlCommand";
  }
  protected:
  explicit ControlCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kThrottleFieldNumber = 3,
    kBrakeFieldNumber = 4,
    kSteeringFieldNumber = 7,
    kTarSpeedFieldNumber = 9,
    kTarAccelerationFieldNumber = 10,
    kGearLocationFieldNumber = 20,
  };
  // optional .prescan.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::prescan::common::Header& header() const;
  PROTOBUF_NODISCARD ::prescan::common::Header* release_header();
  ::prescan::common::Header* mutable_header();
  void set_allocated_header(::prescan::common::Header* header);
  private:
  const ::prescan::common::Header& _internal_header() const;
  ::prescan::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::prescan::common::Header* header);
  ::prescan::common::Header* unsafe_arena_release_header();

  // optional double throttle = 3;
  bool has_throttle() const;
  private:
  bool _internal_has_throttle() const;
  public:
  void clear_throttle();
  double throttle() const;
  void set_throttle(double value);
  private:
  double _internal_throttle() const;
  void _internal_set_throttle(double value);
  public:

  // optional double brake = 4;
  bool has_brake() const;
  private:
  bool _internal_has_brake() const;
  public:
  void clear_brake();
  double brake() const;
  void set_brake(double value);
  private:
  double _internal_brake() const;
  void _internal_set_brake(double value);
  public:

  // optional double steering = 7;
  bool has_steering() const;
  private:
  bool _internal_has_steering() const;
  public:
  void clear_steering();
  double steering() const;
  void set_steering(double value);
  private:
  double _internal_steering() const;
  void _internal_set_steering(double value);
  public:

  // optional double tar_speed = 9;
  bool has_tar_speed() const;
  private:
  bool _internal_has_tar_speed() const;
  public:
  void clear_tar_speed();
  double tar_speed() const;
  void set_tar_speed(double value);
  private:
  double _internal_tar_speed() const;
  void _internal_set_tar_speed(double value);
  public:

  // optional double tar_acceleration = 10;
  bool has_tar_acceleration() const;
  private:
  bool _internal_has_tar_acceleration() const;
  public:
  void clear_tar_acceleration();
  double tar_acceleration() const;
  void set_tar_acceleration(double value);
  private:
  double _internal_tar_acceleration() const;
  void _internal_set_tar_acceleration(double value);
  public:

  // optional .prescan.chassis.Chassis.GearPosition gear_location = 20;
  bool has_gear_location() const;
  private:
  bool _internal_has_gear_location() const;
  public:
  void clear_gear_location();
  ::prescan::chassis::Chassis_GearPosition gear_location() const;
  void set_gear_location(::prescan::chassis::Chassis_GearPosition value);
  private:
  ::prescan::chassis::Chassis_GearPosition _internal_gear_location() const;
  void _internal_set_gear_location(::prescan::chassis::Chassis_GearPosition value);
  public:

  // @@protoc_insertion_point(class_scope:prescan.control.ControlCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::prescan::common::Header* header_;
    double throttle_;
    double brake_;
    double steering_;
    double tar_speed_;
    double tar_acceleration_;
    int gear_location_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_bridge_5fmsgs_2fcontrol_5fmsgs_2fcontrol_5fcmd_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ControlCommand

// optional .prescan.common.Header header = 1;
inline bool ControlCommand::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool ControlCommand::has_header() const {
  return _internal_has_header();
}
inline const ::prescan::common::Header& ControlCommand::_internal_header() const {
  const ::prescan::common::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::prescan::common::Header&>(
      ::prescan::common::_Header_default_instance_);
}
inline const ::prescan::common::Header& ControlCommand::header() const {
  // @@protoc_insertion_point(field_get:prescan.control.ControlCommand.header)
  return _internal_header();
}
inline void ControlCommand::unsafe_arena_set_allocated_header(
    ::prescan::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prescan.control.ControlCommand.header)
}
inline ::prescan::common::Header* ControlCommand::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prescan::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::prescan::common::Header* ControlCommand::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:prescan.control.ControlCommand.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::prescan::common::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::prescan::common::Header* ControlCommand::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::prescan::common::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::prescan::common::Header* ControlCommand::mutable_header() {
  ::prescan::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:prescan.control.ControlCommand.header)
  return _msg;
}
inline void ControlCommand::set_allocated_header(::prescan::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:prescan.control.ControlCommand.header)
}

// optional double throttle = 3;
inline bool ControlCommand::_internal_has_throttle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ControlCommand::has_throttle() const {
  return _internal_has_throttle();
}
inline void ControlCommand::clear_throttle() {
  _impl_.throttle_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ControlCommand::_internal_throttle() const {
  return _impl_.throttle_;
}
inline double ControlCommand::throttle() const {
  // @@protoc_insertion_point(field_get:prescan.control.ControlCommand.throttle)
  return _internal_throttle();
}
inline void ControlCommand::_internal_set_throttle(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.throttle_ = value;
}
inline void ControlCommand::set_throttle(double value) {
  _internal_set_throttle(value);
  // @@protoc_insertion_point(field_set:prescan.control.ControlCommand.throttle)
}

// optional double brake = 4;
inline bool ControlCommand::_internal_has_brake() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ControlCommand::has_brake() const {
  return _internal_has_brake();
}
inline void ControlCommand::clear_brake() {
  _impl_.brake_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ControlCommand::_internal_brake() const {
  return _impl_.brake_;
}
inline double ControlCommand::brake() const {
  // @@protoc_insertion_point(field_get:prescan.control.ControlCommand.brake)
  return _internal_brake();
}
inline void ControlCommand::_internal_set_brake(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.brake_ = value;
}
inline void ControlCommand::set_brake(double value) {
  _internal_set_brake(value);
  // @@protoc_insertion_point(field_set:prescan.control.ControlCommand.brake)
}

// optional double steering = 7;
inline bool ControlCommand::_internal_has_steering() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ControlCommand::has_steering() const {
  return _internal_has_steering();
}
inline void ControlCommand::clear_steering() {
  _impl_.steering_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double ControlCommand::_internal_steering() const {
  return _impl_.steering_;
}
inline double ControlCommand::steering() const {
  // @@protoc_insertion_point(field_get:prescan.control.ControlCommand.steering)
  return _internal_steering();
}
inline void ControlCommand::_internal_set_steering(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.steering_ = value;
}
inline void ControlCommand::set_steering(double value) {
  _internal_set_steering(value);
  // @@protoc_insertion_point(field_set:prescan.control.ControlCommand.steering)
}

// optional double tar_speed = 9;
inline bool ControlCommand::_internal_has_tar_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ControlCommand::has_tar_speed() const {
  return _internal_has_tar_speed();
}
inline void ControlCommand::clear_tar_speed() {
  _impl_.tar_speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double ControlCommand::_internal_tar_speed() const {
  return _impl_.tar_speed_;
}
inline double ControlCommand::tar_speed() const {
  // @@protoc_insertion_point(field_get:prescan.control.ControlCommand.tar_speed)
  return _internal_tar_speed();
}
inline void ControlCommand::_internal_set_tar_speed(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.tar_speed_ = value;
}
inline void ControlCommand::set_tar_speed(double value) {
  _internal_set_tar_speed(value);
  // @@protoc_insertion_point(field_set:prescan.control.ControlCommand.tar_speed)
}

// optional double tar_acceleration = 10;
inline bool ControlCommand::_internal_has_tar_acceleration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ControlCommand::has_tar_acceleration() const {
  return _internal_has_tar_acceleration();
}
inline void ControlCommand::clear_tar_acceleration() {
  _impl_.tar_acceleration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double ControlCommand::_internal_tar_acceleration() const {
  return _impl_.tar_acceleration_;
}
inline double ControlCommand::tar_acceleration() const {
  // @@protoc_insertion_point(field_get:prescan.control.ControlCommand.tar_acceleration)
  return _internal_tar_acceleration();
}
inline void ControlCommand::_internal_set_tar_acceleration(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.tar_acceleration_ = value;
}
inline void ControlCommand::set_tar_acceleration(double value) {
  _internal_set_tar_acceleration(value);
  // @@protoc_insertion_point(field_set:prescan.control.ControlCommand.tar_acceleration)
}

// optional .prescan.chassis.Chassis.GearPosition gear_location = 20;
inline bool ControlCommand::_internal_has_gear_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ControlCommand::has_gear_location() const {
  return _internal_has_gear_location();
}
inline void ControlCommand::clear_gear_location() {
  _impl_.gear_location_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::prescan::chassis::Chassis_GearPosition ControlCommand::_internal_gear_location() const {
  return static_cast< ::prescan::chassis::Chassis_GearPosition >(_impl_.gear_location_);
}
inline ::prescan::chassis::Chassis_GearPosition ControlCommand::gear_location() const {
  // @@protoc_insertion_point(field_get:prescan.control.ControlCommand.gear_location)
  return _internal_gear_location();
}
inline void ControlCommand::_internal_set_gear_location(::prescan::chassis::Chassis_GearPosition value) {
  assert(::prescan::chassis::Chassis_GearPosition_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.gear_location_ = value;
}
inline void ControlCommand::set_gear_location(::prescan::chassis::Chassis_GearPosition value) {
  _internal_set_gear_location(value);
  // @@protoc_insertion_point(field_set:prescan.control.ControlCommand.gear_location)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace prescan

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bridge_5fmsgs_2fcontrol_5fmsgs_2fcontrol_5fcmd_2eproto
