// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bridge_msgs/control_msgs/control_cmd.proto

#include "bridge_msgs/control_msgs/control_cmd.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace prescan {
namespace control {
PROTOBUF_CONSTEXPR ControlCommand::ControlCommand(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.throttle_)*/0
  , /*decltype(_impl_.brake_)*/0
  , /*decltype(_impl_.steering_)*/0
  , /*decltype(_impl_.tar_speed_)*/0
  , /*decltype(_impl_.tar_acceleration_)*/0
  , /*decltype(_impl_.gear_location_)*/0} {}
struct ControlCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlCommandDefaultTypeInternal() {}
  union {
    ControlCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlCommandDefaultTypeInternal _ControlCommand_default_instance_;
}  // namespace control
}  // namespace prescan
static ::_pb::Metadata file_level_metadata_bridge_5fmsgs_2fcontrol_5fmsgs_2fcontrol_5fcmd_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_bridge_5fmsgs_2fcontrol_5fmsgs_2fcontrol_5fcmd_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_bridge_5fmsgs_2fcontrol_5fmsgs_2fcontrol_5fcmd_2eproto = nullptr;

const uint32_t TableStruct_bridge_5fmsgs_2fcontrol_5fmsgs_2fcontrol_5fcmd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::prescan::control::ControlCommand, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::prescan::control::ControlCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::prescan::control::ControlCommand, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::prescan::control::ControlCommand, _impl_.throttle_),
  PROTOBUF_FIELD_OFFSET(::prescan::control::ControlCommand, _impl_.brake_),
  PROTOBUF_FIELD_OFFSET(::prescan::control::ControlCommand, _impl_.steering_),
  PROTOBUF_FIELD_OFFSET(::prescan::control::ControlCommand, _impl_.tar_speed_),
  PROTOBUF_FIELD_OFFSET(::prescan::control::ControlCommand, _impl_.tar_acceleration_),
  PROTOBUF_FIELD_OFFSET(::prescan::control::ControlCommand, _impl_.gear_location_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, -1, sizeof(::prescan::control::ControlCommand)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::prescan::control::_ControlCommand_default_instance_._instance,
};

const char descriptor_table_protodef_bridge_5fmsgs_2fcontrol_5fmsgs_2fcontrol_5fcmd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*bridge_msgs/control_msgs/control_cmd.p"
  "roto\022\017prescan.control\032#bridge_msgs/basic"
  "_msgs/header.proto\032&bridge_msgs/chassis_"
  "msgs/chassis.proto\"\326\001\n\016ControlCommand\022&\n"
  "\006header\030\001 \001(\0132\026.prescan.common.Header\022\020\n"
  "\010throttle\030\003 \001(\001\022\r\n\005brake\030\004 \001(\001\022\020\n\010steeri"
  "ng\030\007 \001(\001\022\021\n\ttar_speed\030\t \001(\001\022\030\n\020tar_accel"
  "eration\030\n \001(\001\022<\n\rgear_location\030\024 \001(\0162%.p"
  "rescan.chassis.Chassis.GearPosition"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_bridge_5fmsgs_2fcontrol_5fmsgs_2fcontrol_5fcmd_2eproto_deps[2] = {
  &::descriptor_table_bridge_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto,
  &::descriptor_table_bridge_5fmsgs_2fchassis_5fmsgs_2fchassis_2eproto,
};
static ::_pbi::once_flag descriptor_table_bridge_5fmsgs_2fcontrol_5fmsgs_2fcontrol_5fcmd_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_bridge_5fmsgs_2fcontrol_5fmsgs_2fcontrol_5fcmd_2eproto = {
    false, false, 355, descriptor_table_protodef_bridge_5fmsgs_2fcontrol_5fmsgs_2fcontrol_5fcmd_2eproto,
    "bridge_msgs/control_msgs/control_cmd.proto",
    &descriptor_table_bridge_5fmsgs_2fcontrol_5fmsgs_2fcontrol_5fcmd_2eproto_once, descriptor_table_bridge_5fmsgs_2fcontrol_5fmsgs_2fcontrol_5fcmd_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_bridge_5fmsgs_2fcontrol_5fmsgs_2fcontrol_5fcmd_2eproto::offsets,
    file_level_metadata_bridge_5fmsgs_2fcontrol_5fmsgs_2fcontrol_5fcmd_2eproto, file_level_enum_descriptors_bridge_5fmsgs_2fcontrol_5fmsgs_2fcontrol_5fcmd_2eproto,
    file_level_service_descriptors_bridge_5fmsgs_2fcontrol_5fmsgs_2fcontrol_5fcmd_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_bridge_5fmsgs_2fcontrol_5fmsgs_2fcontrol_5fcmd_2eproto_getter() {
  return &descriptor_table_bridge_5fmsgs_2fcontrol_5fmsgs_2fcontrol_5fcmd_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_bridge_5fmsgs_2fcontrol_5fmsgs_2fcontrol_5fcmd_2eproto(&descriptor_table_bridge_5fmsgs_2fcontrol_5fmsgs_2fcontrol_5fcmd_2eproto);
namespace prescan {
namespace control {

// ===================================================================

class ControlCommand::_Internal {
 public:
  using HasBits = decltype(std::declval<ControlCommand>()._impl_._has_bits_);
  static const ::prescan::common::Header& header(const ControlCommand* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_throttle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_brake(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steering(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tar_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tar_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_gear_location(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::prescan::common::Header&
ControlCommand::_Internal::header(const ControlCommand* msg) {
  return *msg->_impl_.header_;
}
void ControlCommand::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ControlCommand::ControlCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:prescan.control.ControlCommand)
}
ControlCommand::ControlCommand(const ControlCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ControlCommand* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.throttle_){}
    , decltype(_impl_.brake_){}
    , decltype(_impl_.steering_){}
    , decltype(_impl_.tar_speed_){}
    , decltype(_impl_.tar_acceleration_){}
    , decltype(_impl_.gear_location_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::prescan::common::Header(*from._impl_.header_);
  }
  ::memcpy(&_impl_.throttle_, &from._impl_.throttle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gear_location_) -
    reinterpret_cast<char*>(&_impl_.throttle_)) + sizeof(_impl_.gear_location_));
  // @@protoc_insertion_point(copy_constructor:prescan.control.ControlCommand)
}

inline void ControlCommand::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.throttle_){0}
    , decltype(_impl_.brake_){0}
    , decltype(_impl_.steering_){0}
    , decltype(_impl_.tar_speed_){0}
    , decltype(_impl_.tar_acceleration_){0}
    , decltype(_impl_.gear_location_){0}
  };
}

ControlCommand::~ControlCommand() {
  // @@protoc_insertion_point(destructor:prescan.control.ControlCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ControlCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
}

void ControlCommand::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControlCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:prescan.control.ControlCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.throttle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.gear_location_) -
        reinterpret_cast<char*>(&_impl_.throttle_)) + sizeof(_impl_.gear_location_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .prescan.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double throttle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_throttle(&has_bits);
          _impl_.throttle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double brake = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_brake(&has_bits);
          _impl_.brake_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double steering = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_steering(&has_bits);
          _impl_.steering_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double tar_speed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_tar_speed(&has_bits);
          _impl_.tar_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double tar_acceleration = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_tar_acceleration(&has_bits);
          _impl_.tar_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .prescan.chassis.Chassis.GearPosition gear_location = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::prescan::chassis::Chassis_GearPosition_IsValid(val))) {
            _internal_set_gear_location(static_cast<::prescan::chassis::Chassis_GearPosition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(20, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prescan.control.ControlCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .prescan.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional double throttle = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_throttle(), target);
  }

  // optional double brake = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_brake(), target);
  }

  // optional double steering = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_steering(), target);
  }

  // optional double tar_speed = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_tar_speed(), target);
  }

  // optional double tar_acceleration = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_tar_acceleration(), target);
  }

  // optional .prescan.chassis.Chassis.GearPosition gear_location = 20;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      20, this->_internal_gear_location(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prescan.control.ControlCommand)
  return target;
}

size_t ControlCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prescan.control.ControlCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .prescan.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional double throttle = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double brake = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double steering = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double tar_speed = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double tar_acceleration = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional .prescan.chassis.Chassis.GearPosition gear_location = 20;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_gear_location());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControlCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlCommand::GetClassData() const { return &_class_data_; }


void ControlCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ControlCommand*>(&to_msg);
  auto& from = static_cast<const ControlCommand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prescan.control.ControlCommand)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::prescan::common::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.throttle_ = from._impl_.throttle_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.brake_ = from._impl_.brake_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.steering_ = from._impl_.steering_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tar_speed_ = from._impl_.tar_speed_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tar_acceleration_ = from._impl_.tar_acceleration_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.gear_location_ = from._impl_.gear_location_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlCommand::CopyFrom(const ControlCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prescan.control.ControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlCommand::IsInitialized() const {
  return true;
}

void ControlCommand::InternalSwap(ControlCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlCommand, _impl_.gear_location_)
      + sizeof(ControlCommand::_impl_.gear_location_)
      - PROTOBUF_FIELD_OFFSET(ControlCommand, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bridge_5fmsgs_2fcontrol_5fmsgs_2fcontrol_5fcmd_2eproto_getter, &descriptor_table_bridge_5fmsgs_2fcontrol_5fmsgs_2fcontrol_5fcmd_2eproto_once,
      file_level_metadata_bridge_5fmsgs_2fcontrol_5fmsgs_2fcontrol_5fcmd_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace prescan
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::prescan::control::ControlCommand*
Arena::CreateMaybeMessage< ::prescan::control::ControlCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prescan::control::ControlCommand >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
