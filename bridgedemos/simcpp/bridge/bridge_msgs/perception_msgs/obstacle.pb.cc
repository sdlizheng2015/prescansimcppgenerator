// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bridge_msgs/perception_msgs/obstacle.proto

#include "bridge_msgs/perception_msgs/obstacle.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace prescan {
namespace perception {
PROTOBUF_CONSTEXPR Obstacle::Obstacle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.velocity_)*/nullptr
  , /*decltype(_impl_.box_)*/nullptr
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.heading_)*/0
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.confidence_)*/0
  , /*decltype(_impl_.sub_type_)*/0} {}
struct ObstacleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObstacleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObstacleDefaultTypeInternal() {}
  union {
    Obstacle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObstacleDefaultTypeInternal _Obstacle_default_instance_;
PROTOBUF_CONSTEXPR PointLane::PointLane(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.point_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.numericid_)*/0u} {}
struct PointLaneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointLaneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointLaneDefaultTypeInternal() {}
  union {
    PointLane _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointLaneDefaultTypeInternal _PointLane_default_instance_;
PROTOBUF_CONSTEXPR PointLanes::PointLanes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lane_)*/{}
  , /*decltype(_impl_.header_)*/nullptr} {}
struct PointLanesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointLanesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointLanesDefaultTypeInternal() {}
  union {
    PointLanes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointLanesDefaultTypeInternal _PointLanes_default_instance_;
PROTOBUF_CONSTEXPR PolyNomial::PolyNomial(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.n0_)*/0
  , /*decltype(_impl_.n1_)*/0
  , /*decltype(_impl_.n2_)*/0
  , /*decltype(_impl_.n3_)*/0} {}
struct PolyNomialDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolyNomialDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolyNomialDefaultTypeInternal() {}
  union {
    PolyNomial _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolyNomialDefaultTypeInternal _PolyNomial_default_instance_;
PROTOBUF_CONSTEXPR PolyLane::PolyLane(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/nullptr
  , /*decltype(_impl_.y_)*/nullptr
  , /*decltype(_impl_.z_)*/nullptr
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.quality_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.model_degree_)*/0
  , /*decltype(_impl_.length_)*/0
  , /*decltype(_impl_.groupid_)*/0u
  , /*decltype(_impl_.lane_label_)*/0u
  , /*decltype(_impl_.numericid_)*/0u} {}
struct PolyLaneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolyLaneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolyLaneDefaultTypeInternal() {}
  union {
    PolyLane _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolyLaneDefaultTypeInternal _PolyLane_default_instance_;
PROTOBUF_CONSTEXPR PolyLanes::PolyLanes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lane_)*/{}
  , /*decltype(_impl_.header_)*/nullptr} {}
struct PolyLanesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolyLanesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolyLanesDefaultTypeInternal() {}
  union {
    PolyLanes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolyLanesDefaultTypeInternal _PolyLanes_default_instance_;
PROTOBUF_CONSTEXPR Obstacles::Obstacles(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.perception_obstacle_)*/{}
  , /*decltype(_impl_.header_)*/nullptr} {}
struct ObstaclesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObstaclesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObstaclesDefaultTypeInternal() {}
  union {
    Obstacles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObstaclesDefaultTypeInternal _Obstacles_default_instance_;
}  // namespace perception
}  // namespace prescan
static ::_pb::Metadata file_level_metadata_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto = nullptr;

const uint32_t TableStruct_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::prescan::perception::Obstacle, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::prescan::perception::Obstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::prescan::perception::Obstacle, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::prescan::perception::Obstacle, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::prescan::perception::Obstacle, _impl_.heading_),
  PROTOBUF_FIELD_OFFSET(::prescan::perception::Obstacle, _impl_.velocity_),
  PROTOBUF_FIELD_OFFSET(::prescan::perception::Obstacle, _impl_.box_),
  PROTOBUF_FIELD_OFFSET(::prescan::perception::Obstacle, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::prescan::perception::Obstacle, _impl_.confidence_),
  PROTOBUF_FIELD_OFFSET(::prescan::perception::Obstacle, _impl_.sub_type_),
  PROTOBUF_FIELD_OFFSET(::prescan::perception::Obstacle, _impl_.header_),
  5,
  0,
  4,
  1,
  2,
  6,
  7,
  8,
  3,
  PROTOBUF_FIELD_OFFSET(::prescan::perception::PointLane, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::prescan::perception::PointLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::prescan::perception::PointLane, _impl_.point_),
  PROTOBUF_FIELD_OFFSET(::prescan::perception::PointLane, _impl_.numericid_),
  PROTOBUF_FIELD_OFFSET(::prescan::perception::PointLane, _impl_.header_),
  ~0u,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::prescan::perception::PointLanes, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::prescan::perception::PointLanes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::prescan::perception::PointLanes, _impl_.lane_),
  PROTOBUF_FIELD_OFFSET(::prescan::perception::PointLanes, _impl_.header_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::prescan::perception::PolyNomial, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::prescan::perception::PolyNomial, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::prescan::perception::PolyNomial, _impl_.n0_),
  PROTOBUF_FIELD_OFFSET(::prescan::perception::PolyNomial, _impl_.n1_),
  PROTOBUF_FIELD_OFFSET(::prescan::perception::PolyNomial, _impl_.n2_),
  PROTOBUF_FIELD_OFFSET(::prescan::perception::PolyNomial, _impl_.n3_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::prescan::perception::PolyLane, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::prescan::perception::PolyLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::prescan::perception::PolyLane, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::prescan::perception::PolyLane, _impl_.quality_),
  PROTOBUF_FIELD_OFFSET(::prescan::perception::PolyLane, _impl_.model_degree_),
  PROTOBUF_FIELD_OFFSET(::prescan::perception::PolyLane, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::prescan::perception::PolyLane, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::prescan::perception::PolyLane, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::prescan::perception::PolyLane, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::prescan::perception::PolyLane, _impl_.groupid_),
  PROTOBUF_FIELD_OFFSET(::prescan::perception::PolyLane, _impl_.lane_label_),
  PROTOBUF_FIELD_OFFSET(::prescan::perception::PolyLane, _impl_.numericid_),
  PROTOBUF_FIELD_OFFSET(::prescan::perception::PolyLane, _impl_.header_),
  5,
  4,
  6,
  0,
  1,
  2,
  7,
  8,
  9,
  10,
  3,
  PROTOBUF_FIELD_OFFSET(::prescan::perception::PolyLanes, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::prescan::perception::PolyLanes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::prescan::perception::PolyLanes, _impl_.lane_),
  PROTOBUF_FIELD_OFFSET(::prescan::perception::PolyLanes, _impl_.header_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::prescan::perception::Obstacles, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::prescan::perception::Obstacles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::prescan::perception::Obstacles, _impl_.perception_obstacle_),
  PROTOBUF_FIELD_OFFSET(::prescan::perception::Obstacles, _impl_.header_),
  ~0u,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, -1, sizeof(::prescan::perception::Obstacle)},
  { 24, 33, -1, sizeof(::prescan::perception::PointLane)},
  { 36, 44, -1, sizeof(::prescan::perception::PointLanes)},
  { 46, 56, -1, sizeof(::prescan::perception::PolyNomial)},
  { 60, 77, -1, sizeof(::prescan::perception::PolyLane)},
  { 88, 96, -1, sizeof(::prescan::perception::PolyLanes)},
  { 98, 106, -1, sizeof(::prescan::perception::Obstacles)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::prescan::perception::_Obstacle_default_instance_._instance,
  &::prescan::perception::_PointLane_default_instance_._instance,
  &::prescan::perception::_PointLanes_default_instance_._instance,
  &::prescan::perception::_PolyNomial_default_instance_._instance,
  &::prescan::perception::_PolyLane_default_instance_._instance,
  &::prescan::perception::_PolyLanes_default_instance_._instance,
  &::prescan::perception::_Obstacles_default_instance_._instance,
};

const char descriptor_table_protodef_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*bridge_msgs/perception_msgs/obstacle.p"
  "roto\022\022prescan.perception\032#bridge_msgs/ba"
  "sic_msgs/header.proto\032%bridge_msgs/basic"
  "_msgs/geometry.proto\"\234\005\n\010Obstacle\022\n\n\002id\030"
  "\001 \001(\005\022)\n\010position\030\002 \001(\0132\027.prescan.common"
  ".Point3D\022\017\n\007heading\030\003 \001(\001\022)\n\010velocity\030\004 "
  "\001(\0132\027.prescan.common.Point3D\022*\n\003box\030\005 \001("
  "\0132\035.prescan.common.BoundingBox3D\022/\n\004type"
  "\030\n \001(\0162!.prescan.perception.Obstacle.Typ"
  "e\022\026\n\nconfidence\030\r \001(\001B\002\030\001\0226\n\010sub_type\030\023 "
  "\001(\0162$.prescan.perception.Obstacle.SubTyp"
  "e\022&\n\006header\030\024 \001(\0132\026.prescan.common.Heade"
  "r\"i\n\004Type\022\013\n\007UNKNOWN\020\000\022\023\n\017UNKNOWN_MOVABL"
  "E\020\001\022\025\n\021UNKNOWN_UNMOVABLE\020\002\022\016\n\nPEDESTRIAN"
  "\020\003\022\013\n\007BICYCLE\020\004\022\013\n\007VEHICLE\020\005\"\334\001\n\007SubType"
  "\022\016\n\nST_UNKNOWN\020\000\022\026\n\022ST_UNKNOWN_MOVABLE\020\001"
  "\022\030\n\024ST_UNKNOWN_UNMOVABLE\020\002\022\n\n\006ST_CAR\020\003\022\n"
  "\n\006ST_VAN\020\004\022\014\n\010ST_TRUCK\020\005\022\n\n\006ST_BUS\020\006\022\016\n\n"
  "ST_CYCLIST\020\007\022\023\n\017ST_MOTORCYCLIST\020\010\022\021\n\rST_"
  "TRICYCLIST\020\t\022\021\n\rST_PEDESTRIAN\020\n\022\022\n\016ST_TR"
  "AFFICCONE\020\013\"n\n\tPointLane\022&\n\005point\030\001 \003(\0132"
  "\027.prescan.common.Point3D\022\021\n\tnumericID\030\002 "
  "\001(\r\022&\n\006header\030\003 \001(\0132\026.prescan.common.Hea"
  "der\"a\n\nPointLanes\022+\n\004lane\030\001 \003(\0132\035.presca"
  "n.perception.PointLane\022&\n\006header\030\002 \001(\0132\026"
  ".prescan.common.Header\"<\n\nPolyNomial\022\n\n\002"
  "N0\030\001 \001(\001\022\n\n\002N1\030\002 \001(\001\022\n\n\002N2\030\003 \001(\001\022\n\n\002N3\030\004"
  " \001(\001\"\254\003\n\010PolyLane\022/\n\004type\030\001 \001(\0162!.presca"
  "n.perception.PolyLane.Type\022\017\n\007quality\030\002 "
  "\001(\001\022\024\n\014model_degree\030\003 \001(\005\022)\n\001X\030\004 \001(\0132\036.p"
  "rescan.perception.PolyNomial\022)\n\001Y\030\005 \001(\0132"
  "\036.prescan.perception.PolyNomial\022)\n\001Z\030\006 \001"
  "(\0132\036.prescan.perception.PolyNomial\022\016\n\006le"
  "ngth\030\010 \001(\001\022\017\n\007groupID\030\t \001(\r\022\022\n\nlane_labe"
  "l\030\n \001(\r\022\021\n\tnumericID\030\013 \001(\r\022&\n\006header\030\014 \001"
  "(\0132\026.prescan.common.Header\"W\n\004Type\022\t\n\005So"
  "lid\020\000\022\010\n\004Dash\020\001\022\016\n\nSolidSolid\020\002\022\r\n\tSolid"
  "Dash\020\003\022\014\n\010DashDash\020\004\022\r\n\tDashSolid\020\005\"_\n\tP"
  "olyLanes\022*\n\004lane\030\001 \003(\0132\034.prescan.percept"
  "ion.PolyLane\022&\n\006header\030\002 \001(\0132\026.prescan.c"
  "ommon.Header\"n\n\tObstacles\0229\n\023perception_"
  "obstacle\030\001 \003(\0132\034.prescan.perception.Obst"
  "acle\022&\n\006header\030\002 \001(\0132\026.prescan.common.He"
  "ader"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto_deps[2] = {
  &::descriptor_table_bridge_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto,
  &::descriptor_table_bridge_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto,
};
static ::_pbi::once_flag descriptor_table_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto = {
    false, false, 1724, descriptor_table_protodef_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto,
    "bridge_msgs/perception_msgs/obstacle.proto",
    &descriptor_table_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto_once, descriptor_table_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto_deps, 2, 7,
    schemas, file_default_instances, TableStruct_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto::offsets,
    file_level_metadata_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto, file_level_enum_descriptors_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto,
    file_level_service_descriptors_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto_getter() {
  return &descriptor_table_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto(&descriptor_table_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto);
namespace prescan {
namespace perception {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Obstacle_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto);
  return file_level_enum_descriptors_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto[0];
}
bool Obstacle_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Obstacle_Type Obstacle::UNKNOWN;
constexpr Obstacle_Type Obstacle::UNKNOWN_MOVABLE;
constexpr Obstacle_Type Obstacle::UNKNOWN_UNMOVABLE;
constexpr Obstacle_Type Obstacle::PEDESTRIAN;
constexpr Obstacle_Type Obstacle::BICYCLE;
constexpr Obstacle_Type Obstacle::VEHICLE;
constexpr Obstacle_Type Obstacle::Type_MIN;
constexpr Obstacle_Type Obstacle::Type_MAX;
constexpr int Obstacle::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Obstacle_SubType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto);
  return file_level_enum_descriptors_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto[1];
}
bool Obstacle_SubType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Obstacle_SubType Obstacle::ST_UNKNOWN;
constexpr Obstacle_SubType Obstacle::ST_UNKNOWN_MOVABLE;
constexpr Obstacle_SubType Obstacle::ST_UNKNOWN_UNMOVABLE;
constexpr Obstacle_SubType Obstacle::ST_CAR;
constexpr Obstacle_SubType Obstacle::ST_VAN;
constexpr Obstacle_SubType Obstacle::ST_TRUCK;
constexpr Obstacle_SubType Obstacle::ST_BUS;
constexpr Obstacle_SubType Obstacle::ST_CYCLIST;
constexpr Obstacle_SubType Obstacle::ST_MOTORCYCLIST;
constexpr Obstacle_SubType Obstacle::ST_TRICYCLIST;
constexpr Obstacle_SubType Obstacle::ST_PEDESTRIAN;
constexpr Obstacle_SubType Obstacle::ST_TRAFFICCONE;
constexpr Obstacle_SubType Obstacle::SubType_MIN;
constexpr Obstacle_SubType Obstacle::SubType_MAX;
constexpr int Obstacle::SubType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PolyLane_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto);
  return file_level_enum_descriptors_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto[2];
}
bool PolyLane_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PolyLane_Type PolyLane::Solid;
constexpr PolyLane_Type PolyLane::Dash;
constexpr PolyLane_Type PolyLane::SolidSolid;
constexpr PolyLane_Type PolyLane::SolidDash;
constexpr PolyLane_Type PolyLane::DashDash;
constexpr PolyLane_Type PolyLane::DashSolid;
constexpr PolyLane_Type PolyLane::Type_MIN;
constexpr PolyLane_Type PolyLane::Type_MAX;
constexpr int PolyLane::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Obstacle::_Internal {
 public:
  using HasBits = decltype(std::declval<Obstacle>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::prescan::common::Point3D& position(const Obstacle* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::prescan::common::Point3D& velocity(const Obstacle* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::prescan::common::BoundingBox3D& box(const Obstacle* msg);
  static void set_has_box(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_sub_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::prescan::common::Header& header(const Obstacle* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::prescan::common::Point3D&
Obstacle::_Internal::position(const Obstacle* msg) {
  return *msg->_impl_.position_;
}
const ::prescan::common::Point3D&
Obstacle::_Internal::velocity(const Obstacle* msg) {
  return *msg->_impl_.velocity_;
}
const ::prescan::common::BoundingBox3D&
Obstacle::_Internal::box(const Obstacle* msg) {
  return *msg->_impl_.box_;
}
const ::prescan::common::Header&
Obstacle::_Internal::header(const Obstacle* msg) {
  return *msg->_impl_.header_;
}
void Obstacle::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Obstacle::clear_velocity() {
  if (_impl_.velocity_ != nullptr) _impl_.velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Obstacle::clear_box() {
  if (_impl_.box_ != nullptr) _impl_.box_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Obstacle::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
Obstacle::Obstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:prescan.perception.Obstacle)
}
Obstacle::Obstacle(const Obstacle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Obstacle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.box_){nullptr}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.heading_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.confidence_){}
    , decltype(_impl_.sub_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::prescan::common::Point3D(*from._impl_.position_);
  }
  if (from._internal_has_velocity()) {
    _this->_impl_.velocity_ = new ::prescan::common::Point3D(*from._impl_.velocity_);
  }
  if (from._internal_has_box()) {
    _this->_impl_.box_ = new ::prescan::common::BoundingBox3D(*from._impl_.box_);
  }
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::prescan::common::Header(*from._impl_.header_);
  }
  ::memcpy(&_impl_.heading_, &from._impl_.heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sub_type_) -
    reinterpret_cast<char*>(&_impl_.heading_)) + sizeof(_impl_.sub_type_));
  // @@protoc_insertion_point(copy_constructor:prescan.perception.Obstacle)
}

inline void Obstacle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.box_){nullptr}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.heading_){0}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.confidence_){0}
    , decltype(_impl_.sub_type_){0}
  };
}

Obstacle::~Obstacle() {
  // @@protoc_insertion_point(destructor:prescan.perception.Obstacle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Obstacle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.velocity_;
  if (this != internal_default_instance()) delete _impl_.box_;
  if (this != internal_default_instance()) delete _impl_.header_;
}

void Obstacle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Obstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:prescan.perception.Obstacle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.velocity_ != nullptr);
      _impl_.velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.box_ != nullptr);
      _impl_.box_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.heading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.confidence_) -
        reinterpret_cast<char*>(&_impl_.heading_)) + sizeof(_impl_.confidence_));
  }
  _impl_.sub_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Obstacle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .prescan.common.Point3D position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_heading(&has_bits);
          _impl_.heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .prescan.common.Point3D velocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .prescan.common.BoundingBox3D box = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_box(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .prescan.perception.Obstacle.Type type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::prescan::perception::Obstacle_Type_IsValid(val))) {
            _internal_set_type(static_cast<::prescan::perception::Obstacle_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double confidence = 13 [deprecated = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _Internal::set_has_confidence(&has_bits);
          _impl_.confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .prescan.perception.Obstacle.SubType sub_type = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::prescan::perception::Obstacle_SubType_IsValid(val))) {
            _internal_set_sub_type(static_cast<::prescan::perception::Obstacle_SubType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .prescan.common.Header header = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Obstacle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prescan.perception.Obstacle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional .prescan.common.Point3D position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // optional double heading = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_heading(), target);
  }

  // optional .prescan.common.Point3D velocity = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::velocity(this),
        _Internal::velocity(this).GetCachedSize(), target, stream);
  }

  // optional .prescan.common.BoundingBox3D box = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::box(this),
        _Internal::box(this).GetCachedSize(), target, stream);
  }

  // optional .prescan.perception.Obstacle.Type type = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_type(), target);
  }

  // optional double confidence = 13 [deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_confidence(), target);
  }

  // optional .prescan.perception.Obstacle.SubType sub_type = 19;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      19, this->_internal_sub_type(), target);
  }

  // optional .prescan.common.Header header = 20;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prescan.perception.Obstacle)
  return target;
}

size_t Obstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prescan.perception.Obstacle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .prescan.common.Point3D position = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

    // optional .prescan.common.Point3D velocity = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.velocity_);
    }

    // optional .prescan.common.BoundingBox3D box = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.box_);
    }

    // optional .prescan.common.Header header = 20;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional double heading = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

    // optional .prescan.perception.Obstacle.Type type = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional double confidence = 13 [deprecated = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  // optional .prescan.perception.Obstacle.SubType sub_type = 19;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_sub_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Obstacle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Obstacle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Obstacle::GetClassData() const { return &_class_data_; }


void Obstacle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Obstacle*>(&to_msg);
  auto& from = static_cast<const Obstacle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prescan.perception.Obstacle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position()->::prescan::common::Point3D::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_velocity()->::prescan::common::Point3D::MergeFrom(
          from._internal_velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_box()->::prescan::common::BoundingBox3D::MergeFrom(
          from._internal_box());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_header()->::prescan::common::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.heading_ = from._impl_.heading_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.confidence_ = from._impl_.confidence_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_sub_type(from._internal_sub_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Obstacle::CopyFrom(const Obstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prescan.perception.Obstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacle::IsInitialized() const {
  return true;
}

void Obstacle::InternalSwap(Obstacle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Obstacle, _impl_.sub_type_)
      + sizeof(Obstacle::_impl_.sub_type_)
      - PROTOBUF_FIELD_OFFSET(Obstacle, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Obstacle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto_getter, &descriptor_table_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto_once,
      file_level_metadata_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto[0]);
}

// ===================================================================

class PointLane::_Internal {
 public:
  using HasBits = decltype(std::declval<PointLane>()._impl_._has_bits_);
  static void set_has_numericid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::prescan::common::Header& header(const PointLane* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::prescan::common::Header&
PointLane::_Internal::header(const PointLane* msg) {
  return *msg->_impl_.header_;
}
void PointLane::clear_point() {
  _impl_.point_.Clear();
}
void PointLane::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PointLane::PointLane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:prescan.perception.PointLane)
}
PointLane::PointLane(const PointLane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PointLane* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.point_){from._impl_.point_}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.numericid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::prescan::common::Header(*from._impl_.header_);
  }
  _this->_impl_.numericid_ = from._impl_.numericid_;
  // @@protoc_insertion_point(copy_constructor:prescan.perception.PointLane)
}

inline void PointLane::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.point_){arena}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.numericid_){0u}
  };
}

PointLane::~PointLane() {
  // @@protoc_insertion_point(destructor:prescan.perception.PointLane)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PointLane::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.point_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void PointLane::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PointLane::Clear() {
// @@protoc_insertion_point(message_clear_start:prescan.perception.PointLane)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.point_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  _impl_.numericid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PointLane::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .prescan.common.Point3D point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 numericID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_numericid(&has_bits);
          _impl_.numericid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .prescan.common.Header header = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PointLane::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prescan.perception.PointLane)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .prescan.common.Point3D point = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_point_size()); i < n; i++) {
    const auto& repfield = this->_internal_point(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 numericID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_numericid(), target);
  }

  // optional .prescan.common.Header header = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prescan.perception.PointLane)
  return target;
}

size_t PointLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prescan.perception.PointLane)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .prescan.common.Point3D point = 1;
  total_size += 1UL * this->_internal_point_size();
  for (const auto& msg : this->_impl_.point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .prescan.common.Header header = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional uint32 numericID = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_numericid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PointLane::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PointLane::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PointLane::GetClassData() const { return &_class_data_; }


void PointLane::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PointLane*>(&to_msg);
  auto& from = static_cast<const PointLane&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prescan.perception.PointLane)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.point_.MergeFrom(from._impl_.point_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::prescan::common::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.numericid_ = from._impl_.numericid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PointLane::CopyFrom(const PointLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prescan.perception.PointLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointLane::IsInitialized() const {
  return true;
}

void PointLane::InternalSwap(PointLane* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.point_.InternalSwap(&other->_impl_.point_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PointLane, _impl_.numericid_)
      + sizeof(PointLane::_impl_.numericid_)
      - PROTOBUF_FIELD_OFFSET(PointLane, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PointLane::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto_getter, &descriptor_table_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto_once,
      file_level_metadata_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto[1]);
}

// ===================================================================

class PointLanes::_Internal {
 public:
  using HasBits = decltype(std::declval<PointLanes>()._impl_._has_bits_);
  static const ::prescan::common::Header& header(const PointLanes* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::prescan::common::Header&
PointLanes::_Internal::header(const PointLanes* msg) {
  return *msg->_impl_.header_;
}
void PointLanes::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PointLanes::PointLanes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:prescan.perception.PointLanes)
}
PointLanes::PointLanes(const PointLanes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PointLanes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lane_){from._impl_.lane_}
    , decltype(_impl_.header_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::prescan::common::Header(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:prescan.perception.PointLanes)
}

inline void PointLanes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lane_){arena}
    , decltype(_impl_.header_){nullptr}
  };
}

PointLanes::~PointLanes() {
  // @@protoc_insertion_point(destructor:prescan.perception.PointLanes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PointLanes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lane_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void PointLanes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PointLanes::Clear() {
// @@protoc_insertion_point(message_clear_start:prescan.perception.PointLanes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lane_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PointLanes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .prescan.perception.PointLane lane = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lane(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .prescan.common.Header header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PointLanes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prescan.perception.PointLanes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .prescan.perception.PointLane lane = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lane_size()); i < n; i++) {
    const auto& repfield = this->_internal_lane(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .prescan.common.Header header = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prescan.perception.PointLanes)
  return target;
}

size_t PointLanes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prescan.perception.PointLanes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .prescan.perception.PointLane lane = 1;
  total_size += 1UL * this->_internal_lane_size();
  for (const auto& msg : this->_impl_.lane_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .prescan.common.Header header = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PointLanes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PointLanes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PointLanes::GetClassData() const { return &_class_data_; }


void PointLanes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PointLanes*>(&to_msg);
  auto& from = static_cast<const PointLanes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prescan.perception.PointLanes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lane_.MergeFrom(from._impl_.lane_);
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::prescan::common::Header::MergeFrom(
        from._internal_header());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PointLanes::CopyFrom(const PointLanes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prescan.perception.PointLanes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointLanes::IsInitialized() const {
  return true;
}

void PointLanes::InternalSwap(PointLanes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.lane_.InternalSwap(&other->_impl_.lane_);
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PointLanes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto_getter, &descriptor_table_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto_once,
      file_level_metadata_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto[2]);
}

// ===================================================================

class PolyNomial::_Internal {
 public:
  using HasBits = decltype(std::declval<PolyNomial>()._impl_._has_bits_);
  static void set_has_n0(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_n1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_n2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_n3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PolyNomial::PolyNomial(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:prescan.perception.PolyNomial)
}
PolyNomial::PolyNomial(const PolyNomial& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PolyNomial* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.n0_){}
    , decltype(_impl_.n1_){}
    , decltype(_impl_.n2_){}
    , decltype(_impl_.n3_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.n0_, &from._impl_.n0_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.n3_) -
    reinterpret_cast<char*>(&_impl_.n0_)) + sizeof(_impl_.n3_));
  // @@protoc_insertion_point(copy_constructor:prescan.perception.PolyNomial)
}

inline void PolyNomial::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.n0_){0}
    , decltype(_impl_.n1_){0}
    , decltype(_impl_.n2_){0}
    , decltype(_impl_.n3_){0}
  };
}

PolyNomial::~PolyNomial() {
  // @@protoc_insertion_point(destructor:prescan.perception.PolyNomial)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PolyNomial::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PolyNomial::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PolyNomial::Clear() {
// @@protoc_insertion_point(message_clear_start:prescan.perception.PolyNomial)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.n0_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.n3_) -
        reinterpret_cast<char*>(&_impl_.n0_)) + sizeof(_impl_.n3_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PolyNomial::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double N0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_n0(&has_bits);
          _impl_.n0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double N1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_n1(&has_bits);
          _impl_.n1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double N2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_n2(&has_bits);
          _impl_.n2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double N3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_n3(&has_bits);
          _impl_.n3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PolyNomial::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prescan.perception.PolyNomial)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double N0 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_n0(), target);
  }

  // optional double N1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_n1(), target);
  }

  // optional double N2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_n2(), target);
  }

  // optional double N3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_n3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prescan.perception.PolyNomial)
  return target;
}

size_t PolyNomial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prescan.perception.PolyNomial)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double N0 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double N1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double N2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double N3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PolyNomial::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PolyNomial::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PolyNomial::GetClassData() const { return &_class_data_; }


void PolyNomial::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PolyNomial*>(&to_msg);
  auto& from = static_cast<const PolyNomial&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prescan.perception.PolyNomial)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.n0_ = from._impl_.n0_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.n1_ = from._impl_.n1_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.n2_ = from._impl_.n2_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.n3_ = from._impl_.n3_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PolyNomial::CopyFrom(const PolyNomial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prescan.perception.PolyNomial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolyNomial::IsInitialized() const {
  return true;
}

void PolyNomial::InternalSwap(PolyNomial* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PolyNomial, _impl_.n3_)
      + sizeof(PolyNomial::_impl_.n3_)
      - PROTOBUF_FIELD_OFFSET(PolyNomial, _impl_.n0_)>(
          reinterpret_cast<char*>(&_impl_.n0_),
          reinterpret_cast<char*>(&other->_impl_.n0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PolyNomial::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto_getter, &descriptor_table_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto_once,
      file_level_metadata_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto[3]);
}

// ===================================================================

class PolyLane::_Internal {
 public:
  using HasBits = decltype(std::declval<PolyLane>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_model_degree(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::prescan::perception::PolyNomial& x(const PolyLane* msg);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::prescan::perception::PolyNomial& y(const PolyLane* msg);
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::prescan::perception::PolyNomial& z(const PolyLane* msg);
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_groupid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_lane_label(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_numericid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::prescan::common::Header& header(const PolyLane* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::prescan::perception::PolyNomial&
PolyLane::_Internal::x(const PolyLane* msg) {
  return *msg->_impl_.x_;
}
const ::prescan::perception::PolyNomial&
PolyLane::_Internal::y(const PolyLane* msg) {
  return *msg->_impl_.y_;
}
const ::prescan::perception::PolyNomial&
PolyLane::_Internal::z(const PolyLane* msg) {
  return *msg->_impl_.z_;
}
const ::prescan::common::Header&
PolyLane::_Internal::header(const PolyLane* msg) {
  return *msg->_impl_.header_;
}
void PolyLane::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
PolyLane::PolyLane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:prescan.perception.PolyLane)
}
PolyLane::PolyLane(const PolyLane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PolyLane* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){nullptr}
    , decltype(_impl_.y_){nullptr}
    , decltype(_impl_.z_){nullptr}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.quality_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.model_degree_){}
    , decltype(_impl_.length_){}
    , decltype(_impl_.groupid_){}
    , decltype(_impl_.lane_label_){}
    , decltype(_impl_.numericid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_x()) {
    _this->_impl_.x_ = new ::prescan::perception::PolyNomial(*from._impl_.x_);
  }
  if (from._internal_has_y()) {
    _this->_impl_.y_ = new ::prescan::perception::PolyNomial(*from._impl_.y_);
  }
  if (from._internal_has_z()) {
    _this->_impl_.z_ = new ::prescan::perception::PolyNomial(*from._impl_.z_);
  }
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::prescan::common::Header(*from._impl_.header_);
  }
  ::memcpy(&_impl_.quality_, &from._impl_.quality_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.numericid_) -
    reinterpret_cast<char*>(&_impl_.quality_)) + sizeof(_impl_.numericid_));
  // @@protoc_insertion_point(copy_constructor:prescan.perception.PolyLane)
}

inline void PolyLane::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){nullptr}
    , decltype(_impl_.y_){nullptr}
    , decltype(_impl_.z_){nullptr}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.quality_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.model_degree_){0}
    , decltype(_impl_.length_){0}
    , decltype(_impl_.groupid_){0u}
    , decltype(_impl_.lane_label_){0u}
    , decltype(_impl_.numericid_){0u}
  };
}

PolyLane::~PolyLane() {
  // @@protoc_insertion_point(destructor:prescan.perception.PolyLane)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PolyLane::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.x_;
  if (this != internal_default_instance()) delete _impl_.y_;
  if (this != internal_default_instance()) delete _impl_.z_;
  if (this != internal_default_instance()) delete _impl_.header_;
}

void PolyLane::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PolyLane::Clear() {
// @@protoc_insertion_point(message_clear_start:prescan.perception.PolyLane)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.x_ != nullptr);
      _impl_.x_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.y_ != nullptr);
      _impl_.y_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.z_ != nullptr);
      _impl_.z_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.quality_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.length_) -
        reinterpret_cast<char*>(&_impl_.quality_)) + sizeof(_impl_.length_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.groupid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.numericid_) -
        reinterpret_cast<char*>(&_impl_.groupid_)) + sizeof(_impl_.numericid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PolyLane::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .prescan.perception.PolyLane.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::prescan::perception::PolyLane_Type_IsValid(val))) {
            _internal_set_type(static_cast<::prescan::perception::PolyLane_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional double quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_quality(&has_bits);
          _impl_.quality_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 model_degree = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_model_degree(&has_bits);
          _impl_.model_degree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .prescan.perception.PolyNomial X = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_x(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .prescan.perception.PolyNomial Y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_y(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .prescan.perception.PolyNomial Z = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_z(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double length = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_length(&has_bits);
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 groupID = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_groupid(&has_bits);
          _impl_.groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lane_label = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_lane_label(&has_bits);
          _impl_.lane_label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 numericID = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_numericid(&has_bits);
          _impl_.numericid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .prescan.common.Header header = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PolyLane::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prescan.perception.PolyLane)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .prescan.perception.PolyLane.Type type = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional double quality = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_quality(), target);
  }

  // optional int32 model_degree = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_model_degree(), target);
  }

  // optional .prescan.perception.PolyNomial X = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::x(this),
        _Internal::x(this).GetCachedSize(), target, stream);
  }

  // optional .prescan.perception.PolyNomial Y = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::y(this),
        _Internal::y(this).GetCachedSize(), target, stream);
  }

  // optional .prescan.perception.PolyNomial Z = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::z(this),
        _Internal::z(this).GetCachedSize(), target, stream);
  }

  // optional double length = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_length(), target);
  }

  // optional uint32 groupID = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_groupid(), target);
  }

  // optional uint32 lane_label = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_lane_label(), target);
  }

  // optional uint32 numericID = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_numericid(), target);
  }

  // optional .prescan.common.Header header = 12;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prescan.perception.PolyLane)
  return target;
}

size_t PolyLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prescan.perception.PolyLane)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .prescan.perception.PolyNomial X = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.x_);
    }

    // optional .prescan.perception.PolyNomial Y = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.y_);
    }

    // optional .prescan.perception.PolyNomial Z = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.z_);
    }

    // optional .prescan.common.Header header = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional double quality = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional .prescan.perception.PolyLane.Type type = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional int32 model_degree = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_model_degree());
    }

    // optional double length = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 groupID = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_groupid());
    }

    // optional uint32 lane_label = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lane_label());
    }

    // optional uint32 numericID = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_numericid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PolyLane::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PolyLane::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PolyLane::GetClassData() const { return &_class_data_; }


void PolyLane::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PolyLane*>(&to_msg);
  auto& from = static_cast<const PolyLane&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prescan.perception.PolyLane)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_x()->::prescan::perception::PolyNomial::MergeFrom(
          from._internal_x());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_y()->::prescan::perception::PolyNomial::MergeFrom(
          from._internal_y());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_z()->::prescan::perception::PolyNomial::MergeFrom(
          from._internal_z());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_header()->::prescan::common::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.quality_ = from._impl_.quality_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.model_degree_ = from._impl_.model_degree_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.length_ = from._impl_.length_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.groupid_ = from._impl_.groupid_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.lane_label_ = from._impl_.lane_label_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.numericid_ = from._impl_.numericid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PolyLane::CopyFrom(const PolyLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prescan.perception.PolyLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolyLane::IsInitialized() const {
  return true;
}

void PolyLane::InternalSwap(PolyLane* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PolyLane, _impl_.numericid_)
      + sizeof(PolyLane::_impl_.numericid_)
      - PROTOBUF_FIELD_OFFSET(PolyLane, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PolyLane::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto_getter, &descriptor_table_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto_once,
      file_level_metadata_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto[4]);
}

// ===================================================================

class PolyLanes::_Internal {
 public:
  using HasBits = decltype(std::declval<PolyLanes>()._impl_._has_bits_);
  static const ::prescan::common::Header& header(const PolyLanes* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::prescan::common::Header&
PolyLanes::_Internal::header(const PolyLanes* msg) {
  return *msg->_impl_.header_;
}
void PolyLanes::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PolyLanes::PolyLanes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:prescan.perception.PolyLanes)
}
PolyLanes::PolyLanes(const PolyLanes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PolyLanes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lane_){from._impl_.lane_}
    , decltype(_impl_.header_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::prescan::common::Header(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:prescan.perception.PolyLanes)
}

inline void PolyLanes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lane_){arena}
    , decltype(_impl_.header_){nullptr}
  };
}

PolyLanes::~PolyLanes() {
  // @@protoc_insertion_point(destructor:prescan.perception.PolyLanes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PolyLanes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lane_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void PolyLanes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PolyLanes::Clear() {
// @@protoc_insertion_point(message_clear_start:prescan.perception.PolyLanes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lane_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PolyLanes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .prescan.perception.PolyLane lane = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lane(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .prescan.common.Header header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PolyLanes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prescan.perception.PolyLanes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .prescan.perception.PolyLane lane = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lane_size()); i < n; i++) {
    const auto& repfield = this->_internal_lane(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .prescan.common.Header header = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prescan.perception.PolyLanes)
  return target;
}

size_t PolyLanes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prescan.perception.PolyLanes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .prescan.perception.PolyLane lane = 1;
  total_size += 1UL * this->_internal_lane_size();
  for (const auto& msg : this->_impl_.lane_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .prescan.common.Header header = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PolyLanes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PolyLanes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PolyLanes::GetClassData() const { return &_class_data_; }


void PolyLanes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PolyLanes*>(&to_msg);
  auto& from = static_cast<const PolyLanes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prescan.perception.PolyLanes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lane_.MergeFrom(from._impl_.lane_);
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::prescan::common::Header::MergeFrom(
        from._internal_header());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PolyLanes::CopyFrom(const PolyLanes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prescan.perception.PolyLanes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolyLanes::IsInitialized() const {
  return true;
}

void PolyLanes::InternalSwap(PolyLanes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.lane_.InternalSwap(&other->_impl_.lane_);
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PolyLanes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto_getter, &descriptor_table_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto_once,
      file_level_metadata_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto[5]);
}

// ===================================================================

class Obstacles::_Internal {
 public:
  using HasBits = decltype(std::declval<Obstacles>()._impl_._has_bits_);
  static const ::prescan::common::Header& header(const Obstacles* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::prescan::common::Header&
Obstacles::_Internal::header(const Obstacles* msg) {
  return *msg->_impl_.header_;
}
void Obstacles::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Obstacles::Obstacles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:prescan.perception.Obstacles)
}
Obstacles::Obstacles(const Obstacles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Obstacles* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.perception_obstacle_){from._impl_.perception_obstacle_}
    , decltype(_impl_.header_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::prescan::common::Header(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:prescan.perception.Obstacles)
}

inline void Obstacles::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.perception_obstacle_){arena}
    , decltype(_impl_.header_){nullptr}
  };
}

Obstacles::~Obstacles() {
  // @@protoc_insertion_point(destructor:prescan.perception.Obstacles)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Obstacles::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.perception_obstacle_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void Obstacles::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Obstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:prescan.perception.Obstacles)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.perception_obstacle_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.header_ != nullptr);
    _impl_.header_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Obstacles::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .prescan.perception.Obstacle perception_obstacle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_perception_obstacle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .prescan.common.Header header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Obstacles::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prescan.perception.Obstacles)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .prescan.perception.Obstacle perception_obstacle = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_perception_obstacle_size()); i < n; i++) {
    const auto& repfield = this->_internal_perception_obstacle(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .prescan.common.Header header = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prescan.perception.Obstacles)
  return target;
}

size_t Obstacles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prescan.perception.Obstacles)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .prescan.perception.Obstacle perception_obstacle = 1;
  total_size += 1UL * this->_internal_perception_obstacle_size();
  for (const auto& msg : this->_impl_.perception_obstacle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .prescan.common.Header header = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Obstacles::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Obstacles::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Obstacles::GetClassData() const { return &_class_data_; }


void Obstacles::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Obstacles*>(&to_msg);
  auto& from = static_cast<const Obstacles&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prescan.perception.Obstacles)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.perception_obstacle_.MergeFrom(from._impl_.perception_obstacle_);
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::prescan::common::Header::MergeFrom(
        from._internal_header());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Obstacles::CopyFrom(const Obstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prescan.perception.Obstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacles::IsInitialized() const {
  return true;
}

void Obstacles::InternalSwap(Obstacles* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.perception_obstacle_.InternalSwap(&other->_impl_.perception_obstacle_);
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Obstacles::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto_getter, &descriptor_table_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto_once,
      file_level_metadata_bridge_5fmsgs_2fperception_5fmsgs_2fobstacle_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
}  // namespace prescan
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::prescan::perception::Obstacle*
Arena::CreateMaybeMessage< ::prescan::perception::Obstacle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prescan::perception::Obstacle >(arena);
}
template<> PROTOBUF_NOINLINE ::prescan::perception::PointLane*
Arena::CreateMaybeMessage< ::prescan::perception::PointLane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prescan::perception::PointLane >(arena);
}
template<> PROTOBUF_NOINLINE ::prescan::perception::PointLanes*
Arena::CreateMaybeMessage< ::prescan::perception::PointLanes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prescan::perception::PointLanes >(arena);
}
template<> PROTOBUF_NOINLINE ::prescan::perception::PolyNomial*
Arena::CreateMaybeMessage< ::prescan::perception::PolyNomial >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prescan::perception::PolyNomial >(arena);
}
template<> PROTOBUF_NOINLINE ::prescan::perception::PolyLane*
Arena::CreateMaybeMessage< ::prescan::perception::PolyLane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prescan::perception::PolyLane >(arena);
}
template<> PROTOBUF_NOINLINE ::prescan::perception::PolyLanes*
Arena::CreateMaybeMessage< ::prescan::perception::PolyLanes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prescan::perception::PolyLanes >(arena);
}
template<> PROTOBUF_NOINLINE ::prescan::perception::Obstacles*
Arena::CreateMaybeMessage< ::prescan::perception::Obstacles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prescan::perception::Obstacles >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
