// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bridge_msgs/localiztion_msgs/localization.proto

#include "bridge_msgs/localiztion_msgs/localization.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace prescan {
namespace localization {
PROTOBUF_CONSTEXPR Gps::Gps(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.llh_)*/nullptr
  , /*decltype(_impl_.heading_)*/0} {}
struct GpsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GpsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GpsDefaultTypeInternal() {}
  union {
    Gps _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GpsDefaultTypeInternal _Gps_default_instance_;
PROTOBUF_CONSTEXPR Pose::Pose(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.xyz_)*/nullptr} {}
struct PoseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PoseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PoseDefaultTypeInternal() {}
  union {
    Pose _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PoseDefaultTypeInternal _Pose_default_instance_;
PROTOBUF_CONSTEXPR Imu::Imu(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.orientation_)*/nullptr
  , /*decltype(_impl_.orientation_rate_)*/nullptr
  , /*decltype(_impl_.acceleration_)*/nullptr} {}
struct ImuDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImuDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImuDefaultTypeInternal() {}
  union {
    Imu _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImuDefaultTypeInternal _Imu_default_instance_;
PROTOBUF_CONSTEXPR LocalizationStatus::LocalizationStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.gps_)*/nullptr
  , /*decltype(_impl_.imu_)*/nullptr
  , /*decltype(_impl_.pose_)*/nullptr} {}
struct LocalizationStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalizationStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalizationStatusDefaultTypeInternal() {}
  union {
    LocalizationStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalizationStatusDefaultTypeInternal _LocalizationStatus_default_instance_;
}  // namespace localization
}  // namespace prescan
static ::_pb::Metadata file_level_metadata_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto = nullptr;

const uint32_t TableStruct_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::prescan::localization::Gps, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::prescan::localization::Gps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::prescan::localization::Gps, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::prescan::localization::Gps, _impl_.llh_),
  PROTOBUF_FIELD_OFFSET(::prescan::localization::Gps, _impl_.heading_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::prescan::localization::Pose, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::prescan::localization::Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::prescan::localization::Pose, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::prescan::localization::Pose, _impl_.xyz_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::prescan::localization::Imu, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::prescan::localization::Imu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::prescan::localization::Imu, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::prescan::localization::Imu, _impl_.orientation_),
  PROTOBUF_FIELD_OFFSET(::prescan::localization::Imu, _impl_.orientation_rate_),
  PROTOBUF_FIELD_OFFSET(::prescan::localization::Imu, _impl_.acceleration_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::prescan::localization::LocalizationStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::prescan::localization::LocalizationStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::prescan::localization::LocalizationStatus, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::prescan::localization::LocalizationStatus, _impl_.gps_),
  PROTOBUF_FIELD_OFFSET(::prescan::localization::LocalizationStatus, _impl_.imu_),
  PROTOBUF_FIELD_OFFSET(::prescan::localization::LocalizationStatus, _impl_.pose_),
  0,
  1,
  2,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::prescan::localization::Gps)},
  { 12, 20, -1, sizeof(::prescan::localization::Pose)},
  { 22, 32, -1, sizeof(::prescan::localization::Imu)},
  { 36, 46, -1, sizeof(::prescan::localization::LocalizationStatus)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::prescan::localization::_Gps_default_instance_._instance,
  &::prescan::localization::_Pose_default_instance_._instance,
  &::prescan::localization::_Imu_default_instance_._instance,
  &::prescan::localization::_LocalizationStatus_default_instance_._instance,
};

const char descriptor_table_protodef_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/bridge_msgs/localiztion_msgs/localizat"
  "ion.proto\022\024prescan.localization\032#bridge_"
  "msgs/basic_msgs/header.proto\032%bridge_msg"
  "s/basic_msgs/geometry.proto\"e\n\003Gps\022&\n\006he"
  "ader\030\001 \001(\0132\026.prescan.common.Header\022%\n\003ll"
  "h\030\002 \001(\0132\030.prescan.common.PointLLH\022\017\n\007hea"
  "ding\030\005 \001(\001\"T\n\004Pose\022&\n\006header\030\001 \001(\0132\026.pre"
  "scan.common.Header\022$\n\003xyz\030\002 \001(\0132\027.presca"
  "n.common.Point3D\"\305\001\n\003Imu\022&\n\006header\030\001 \001(\013"
  "2\026.prescan.common.Header\0220\n\013orientation\030"
  "\002 \001(\0132\033.prescan.common.Orientation\0225\n\020or"
  "ientation_rate\030\007 \001(\0132\033.prescan.common.Or"
  "ientation\022-\n\014acceleration\030\014 \001(\0132\027.presca"
  "n.common.Point3D\"\266\001\n\022LocalizationStatus\022"
  "&\n\006header\030\001 \001(\0132\026.prescan.common.Header\022"
  "&\n\003gps\030\002 \001(\0132\031.prescan.localization.Gps\022"
  "&\n\003imu\030\003 \001(\0132\031.prescan.localization.Imu\022"
  "(\n\004pose\030\004 \001(\0132\032.prescan.localization.Pos"
  "e"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto_deps[2] = {
  &::descriptor_table_bridge_5fmsgs_2fbasic_5fmsgs_2fgeometry_2eproto,
  &::descriptor_table_bridge_5fmsgs_2fbasic_5fmsgs_2fheader_2eproto,
};
static ::_pbi::once_flag descriptor_table_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto = {
    false, false, 721, descriptor_table_protodef_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto,
    "bridge_msgs/localiztion_msgs/localization.proto",
    &descriptor_table_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto_once, descriptor_table_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto_deps, 2, 4,
    schemas, file_default_instances, TableStruct_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto::offsets,
    file_level_metadata_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto, file_level_enum_descriptors_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto,
    file_level_service_descriptors_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto_getter() {
  return &descriptor_table_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto(&descriptor_table_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto);
namespace prescan {
namespace localization {

// ===================================================================

class Gps::_Internal {
 public:
  using HasBits = decltype(std::declval<Gps>()._impl_._has_bits_);
  static const ::prescan::common::Header& header(const Gps* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::prescan::common::PointLLH& llh(const Gps* msg);
  static void set_has_llh(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::prescan::common::Header&
Gps::_Internal::header(const Gps* msg) {
  return *msg->_impl_.header_;
}
const ::prescan::common::PointLLH&
Gps::_Internal::llh(const Gps* msg) {
  return *msg->_impl_.llh_;
}
void Gps::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Gps::clear_llh() {
  if (_impl_.llh_ != nullptr) _impl_.llh_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Gps::Gps(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:prescan.localization.Gps)
}
Gps::Gps(const Gps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Gps* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.llh_){nullptr}
    , decltype(_impl_.heading_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::prescan::common::Header(*from._impl_.header_);
  }
  if (from._internal_has_llh()) {
    _this->_impl_.llh_ = new ::prescan::common::PointLLH(*from._impl_.llh_);
  }
  _this->_impl_.heading_ = from._impl_.heading_;
  // @@protoc_insertion_point(copy_constructor:prescan.localization.Gps)
}

inline void Gps::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.llh_){nullptr}
    , decltype(_impl_.heading_){0}
  };
}

Gps::~Gps() {
  // @@protoc_insertion_point(destructor:prescan.localization.Gps)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Gps::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.llh_;
}

void Gps::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Gps::Clear() {
// @@protoc_insertion_point(message_clear_start:prescan.localization.Gps)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.llh_ != nullptr);
      _impl_.llh_->Clear();
    }
  }
  _impl_.heading_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Gps::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .prescan.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .prescan.common.PointLLH llh = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_llh(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double heading = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_heading(&has_bits);
          _impl_.heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Gps::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prescan.localization.Gps)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .prescan.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional .prescan.common.PointLLH llh = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::llh(this),
        _Internal::llh(this).GetCachedSize(), target, stream);
  }

  // optional double heading = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_heading(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prescan.localization.Gps)
  return target;
}

size_t Gps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prescan.localization.Gps)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .prescan.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .prescan.common.PointLLH llh = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.llh_);
    }

    // optional double heading = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Gps::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Gps::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Gps::GetClassData() const { return &_class_data_; }


void Gps::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Gps*>(&to_msg);
  auto& from = static_cast<const Gps&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prescan.localization.Gps)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::prescan::common::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_llh()->::prescan::common::PointLLH::MergeFrom(
          from._internal_llh());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.heading_ = from._impl_.heading_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Gps::CopyFrom(const Gps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prescan.localization.Gps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gps::IsInitialized() const {
  return true;
}

void Gps::InternalSwap(Gps* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Gps, _impl_.heading_)
      + sizeof(Gps::_impl_.heading_)
      - PROTOBUF_FIELD_OFFSET(Gps, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Gps::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto_getter, &descriptor_table_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto_once,
      file_level_metadata_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto[0]);
}

// ===================================================================

class Pose::_Internal {
 public:
  using HasBits = decltype(std::declval<Pose>()._impl_._has_bits_);
  static const ::prescan::common::Header& header(const Pose* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::prescan::common::Point3D& xyz(const Pose* msg);
  static void set_has_xyz(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::prescan::common::Header&
Pose::_Internal::header(const Pose* msg) {
  return *msg->_impl_.header_;
}
const ::prescan::common::Point3D&
Pose::_Internal::xyz(const Pose* msg) {
  return *msg->_impl_.xyz_;
}
void Pose::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Pose::clear_xyz() {
  if (_impl_.xyz_ != nullptr) _impl_.xyz_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Pose::Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:prescan.localization.Pose)
}
Pose::Pose(const Pose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Pose* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.xyz_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::prescan::common::Header(*from._impl_.header_);
  }
  if (from._internal_has_xyz()) {
    _this->_impl_.xyz_ = new ::prescan::common::Point3D(*from._impl_.xyz_);
  }
  // @@protoc_insertion_point(copy_constructor:prescan.localization.Pose)
}

inline void Pose::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.xyz_){nullptr}
  };
}

Pose::~Pose() {
  // @@protoc_insertion_point(destructor:prescan.localization.Pose)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pose::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.xyz_;
}

void Pose::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:prescan.localization.Pose)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.xyz_ != nullptr);
      _impl_.xyz_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pose::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .prescan.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .prescan.common.Point3D xyz = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_xyz(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pose::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prescan.localization.Pose)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .prescan.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional .prescan.common.Point3D xyz = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::xyz(this),
        _Internal::xyz(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prescan.localization.Pose)
  return target;
}

size_t Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prescan.localization.Pose)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .prescan.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .prescan.common.Point3D xyz = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.xyz_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pose::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Pose::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pose::GetClassData() const { return &_class_data_; }


void Pose::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Pose*>(&to_msg);
  auto& from = static_cast<const Pose&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prescan.localization.Pose)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::prescan::common::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_xyz()->::prescan::common::Point3D::MergeFrom(
          from._internal_xyz());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prescan.localization.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {
  return true;
}

void Pose::InternalSwap(Pose* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pose, _impl_.xyz_)
      + sizeof(Pose::_impl_.xyz_)
      - PROTOBUF_FIELD_OFFSET(Pose, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pose::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto_getter, &descriptor_table_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto_once,
      file_level_metadata_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto[1]);
}

// ===================================================================

class Imu::_Internal {
 public:
  using HasBits = decltype(std::declval<Imu>()._impl_._has_bits_);
  static const ::prescan::common::Header& header(const Imu* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::prescan::common::Orientation& orientation(const Imu* msg);
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::prescan::common::Orientation& orientation_rate(const Imu* msg);
  static void set_has_orientation_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::prescan::common::Point3D& acceleration(const Imu* msg);
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::prescan::common::Header&
Imu::_Internal::header(const Imu* msg) {
  return *msg->_impl_.header_;
}
const ::prescan::common::Orientation&
Imu::_Internal::orientation(const Imu* msg) {
  return *msg->_impl_.orientation_;
}
const ::prescan::common::Orientation&
Imu::_Internal::orientation_rate(const Imu* msg) {
  return *msg->_impl_.orientation_rate_;
}
const ::prescan::common::Point3D&
Imu::_Internal::acceleration(const Imu* msg) {
  return *msg->_impl_.acceleration_;
}
void Imu::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Imu::clear_orientation() {
  if (_impl_.orientation_ != nullptr) _impl_.orientation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Imu::clear_orientation_rate() {
  if (_impl_.orientation_rate_ != nullptr) _impl_.orientation_rate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Imu::clear_acceleration() {
  if (_impl_.acceleration_ != nullptr) _impl_.acceleration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
Imu::Imu(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:prescan.localization.Imu)
}
Imu::Imu(const Imu& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Imu* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.orientation_){nullptr}
    , decltype(_impl_.orientation_rate_){nullptr}
    , decltype(_impl_.acceleration_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::prescan::common::Header(*from._impl_.header_);
  }
  if (from._internal_has_orientation()) {
    _this->_impl_.orientation_ = new ::prescan::common::Orientation(*from._impl_.orientation_);
  }
  if (from._internal_has_orientation_rate()) {
    _this->_impl_.orientation_rate_ = new ::prescan::common::Orientation(*from._impl_.orientation_rate_);
  }
  if (from._internal_has_acceleration()) {
    _this->_impl_.acceleration_ = new ::prescan::common::Point3D(*from._impl_.acceleration_);
  }
  // @@protoc_insertion_point(copy_constructor:prescan.localization.Imu)
}

inline void Imu::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.orientation_){nullptr}
    , decltype(_impl_.orientation_rate_){nullptr}
    , decltype(_impl_.acceleration_){nullptr}
  };
}

Imu::~Imu() {
  // @@protoc_insertion_point(destructor:prescan.localization.Imu)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Imu::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.orientation_;
  if (this != internal_default_instance()) delete _impl_.orientation_rate_;
  if (this != internal_default_instance()) delete _impl_.acceleration_;
}

void Imu::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Imu::Clear() {
// @@protoc_insertion_point(message_clear_start:prescan.localization.Imu)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.orientation_ != nullptr);
      _impl_.orientation_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.orientation_rate_ != nullptr);
      _impl_.orientation_rate_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.acceleration_ != nullptr);
      _impl_.acceleration_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Imu::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .prescan.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .prescan.common.Orientation orientation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .prescan.common.Orientation orientation_rate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation_rate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .prescan.common.Point3D acceleration = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Imu::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prescan.localization.Imu)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .prescan.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional .prescan.common.Orientation orientation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::orientation(this),
        _Internal::orientation(this).GetCachedSize(), target, stream);
  }

  // optional .prescan.common.Orientation orientation_rate = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::orientation_rate(this),
        _Internal::orientation_rate(this).GetCachedSize(), target, stream);
  }

  // optional .prescan.common.Point3D acceleration = 12;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::acceleration(this),
        _Internal::acceleration(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prescan.localization.Imu)
  return target;
}

size_t Imu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prescan.localization.Imu)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .prescan.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .prescan.common.Orientation orientation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.orientation_);
    }

    // optional .prescan.common.Orientation orientation_rate = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.orientation_rate_);
    }

    // optional .prescan.common.Point3D acceleration = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.acceleration_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Imu::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Imu::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Imu::GetClassData() const { return &_class_data_; }


void Imu::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Imu*>(&to_msg);
  auto& from = static_cast<const Imu&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prescan.localization.Imu)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::prescan::common::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_orientation()->::prescan::common::Orientation::MergeFrom(
          from._internal_orientation());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_orientation_rate()->::prescan::common::Orientation::MergeFrom(
          from._internal_orientation_rate());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_acceleration()->::prescan::common::Point3D::MergeFrom(
          from._internal_acceleration());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Imu::CopyFrom(const Imu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prescan.localization.Imu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Imu::IsInitialized() const {
  return true;
}

void Imu::InternalSwap(Imu* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Imu, _impl_.acceleration_)
      + sizeof(Imu::_impl_.acceleration_)
      - PROTOBUF_FIELD_OFFSET(Imu, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Imu::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto_getter, &descriptor_table_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto_once,
      file_level_metadata_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto[2]);
}

// ===================================================================

class LocalizationStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalizationStatus>()._impl_._has_bits_);
  static const ::prescan::common::Header& header(const LocalizationStatus* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::prescan::localization::Gps& gps(const LocalizationStatus* msg);
  static void set_has_gps(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::prescan::localization::Imu& imu(const LocalizationStatus* msg);
  static void set_has_imu(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::prescan::localization::Pose& pose(const LocalizationStatus* msg);
  static void set_has_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::prescan::common::Header&
LocalizationStatus::_Internal::header(const LocalizationStatus* msg) {
  return *msg->_impl_.header_;
}
const ::prescan::localization::Gps&
LocalizationStatus::_Internal::gps(const LocalizationStatus* msg) {
  return *msg->_impl_.gps_;
}
const ::prescan::localization::Imu&
LocalizationStatus::_Internal::imu(const LocalizationStatus* msg) {
  return *msg->_impl_.imu_;
}
const ::prescan::localization::Pose&
LocalizationStatus::_Internal::pose(const LocalizationStatus* msg) {
  return *msg->_impl_.pose_;
}
void LocalizationStatus::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
LocalizationStatus::LocalizationStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:prescan.localization.LocalizationStatus)
}
LocalizationStatus::LocalizationStatus(const LocalizationStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocalizationStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.gps_){nullptr}
    , decltype(_impl_.imu_){nullptr}
    , decltype(_impl_.pose_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::prescan::common::Header(*from._impl_.header_);
  }
  if (from._internal_has_gps()) {
    _this->_impl_.gps_ = new ::prescan::localization::Gps(*from._impl_.gps_);
  }
  if (from._internal_has_imu()) {
    _this->_impl_.imu_ = new ::prescan::localization::Imu(*from._impl_.imu_);
  }
  if (from._internal_has_pose()) {
    _this->_impl_.pose_ = new ::prescan::localization::Pose(*from._impl_.pose_);
  }
  // @@protoc_insertion_point(copy_constructor:prescan.localization.LocalizationStatus)
}

inline void LocalizationStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.gps_){nullptr}
    , decltype(_impl_.imu_){nullptr}
    , decltype(_impl_.pose_){nullptr}
  };
}

LocalizationStatus::~LocalizationStatus() {
  // @@protoc_insertion_point(destructor:prescan.localization.LocalizationStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalizationStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.gps_;
  if (this != internal_default_instance()) delete _impl_.imu_;
  if (this != internal_default_instance()) delete _impl_.pose_;
}

void LocalizationStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocalizationStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:prescan.localization.LocalizationStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.gps_ != nullptr);
      _impl_.gps_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.imu_ != nullptr);
      _impl_.imu_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.pose_ != nullptr);
      _impl_.pose_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalizationStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .prescan.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .prescan.localization.Gps gps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gps(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .prescan.localization.Imu imu = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_imu(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .prescan.localization.Pose pose = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalizationStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prescan.localization.LocalizationStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .prescan.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional .prescan.localization.Gps gps = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::gps(this),
        _Internal::gps(this).GetCachedSize(), target, stream);
  }

  // optional .prescan.localization.Imu imu = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::imu(this),
        _Internal::imu(this).GetCachedSize(), target, stream);
  }

  // optional .prescan.localization.Pose pose = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prescan.localization.LocalizationStatus)
  return target;
}

size_t LocalizationStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prescan.localization.LocalizationStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .prescan.common.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // optional .prescan.localization.Gps gps = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gps_);
    }

    // optional .prescan.localization.Imu imu = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.imu_);
    }

    // optional .prescan.localization.Pose pose = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pose_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalizationStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocalizationStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalizationStatus::GetClassData() const { return &_class_data_; }


void LocalizationStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocalizationStatus*>(&to_msg);
  auto& from = static_cast<const LocalizationStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:prescan.localization.LocalizationStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::prescan::common::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_gps()->::prescan::localization::Gps::MergeFrom(
          from._internal_gps());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_imu()->::prescan::localization::Imu::MergeFrom(
          from._internal_imu());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_pose()->::prescan::localization::Pose::MergeFrom(
          from._internal_pose());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocalizationStatus::CopyFrom(const LocalizationStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prescan.localization.LocalizationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationStatus::IsInitialized() const {
  return true;
}

void LocalizationStatus::InternalSwap(LocalizationStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalizationStatus, _impl_.pose_)
      + sizeof(LocalizationStatus::_impl_.pose_)
      - PROTOBUF_FIELD_OFFSET(LocalizationStatus, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalizationStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto_getter, &descriptor_table_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto_once,
      file_level_metadata_bridge_5fmsgs_2flocaliztion_5fmsgs_2flocalization_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace localization
}  // namespace prescan
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::prescan::localization::Gps*
Arena::CreateMaybeMessage< ::prescan::localization::Gps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prescan::localization::Gps >(arena);
}
template<> PROTOBUF_NOINLINE ::prescan::localization::Pose*
Arena::CreateMaybeMessage< ::prescan::localization::Pose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prescan::localization::Pose >(arena);
}
template<> PROTOBUF_NOINLINE ::prescan::localization::Imu*
Arena::CreateMaybeMessage< ::prescan::localization::Imu >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prescan::localization::Imu >(arena);
}
template<> PROTOBUF_NOINLINE ::prescan::localization::LocalizationStatus*
Arena::CreateMaybeMessage< ::prescan::localization::LocalizationStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prescan::localization::LocalizationStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
